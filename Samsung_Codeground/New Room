#include <iostream>
#include <cstring>
using namespace std;

int map[101][101][2];
int dp[101][101][1201];

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int T;
	cin >> T;

	for (int tc = 1; tc <= T; tc++) {
		int N;
		memset(map, 0, sizeof(map));
		memset(dp, -1, sizeof(dp));
		cin >> N;

		for (int y = 1; y <= N; y++)
			for (int x = 1; x <= N; x++) {
				int num;
				cin >> num;

				while (!(num % 2)) {
					map[y][x][0]++;
					num /= 2;
				}

				while (!(num % 3)) {
					map[y][x][1]++;
					num /= 3;
				}
			}

		dp[1][1][map[1][1][1]] = map[1][1][0];

		for (int y = 1; y <= N; y++) {
			for (int x = 1; x <= N; x++) {
				for (int k = 0; k <= 1200; k++) {
					if (k - map[y][x][1] >= 0) {
						if (dp[y - 1][x][k - map[y][x][1]] != -1)
							dp[y][x][k] = dp[y - 1][x][k - map[y][x][1]] + map[y][x][0];

						if (dp[y][x - 1][k - map[y][x][1]] != -1)
							dp[y][x][k] = max(dp[y][x][k], dp[y][x - 1][k - map[y][x][1]] + map[y][x][0]);
					}
				}
			}
		}

		int answer = 0;

		for (int k = 0; k <= 1200; k++)
			answer = max(answer, min(dp[N][N][k], k));

		cout << "Case #" << tc << "\n";
		cout << answer << "\n";
	}

	return 0;
}
