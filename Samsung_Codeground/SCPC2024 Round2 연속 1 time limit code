#include <iostream>
#include <cstring>
using namespace std;

int input[300001];
long long arr[300001][2];

long long answer;

void DFS(int size, int idx, long long cnt, int state)
{
	if (idx > size) {
		answer = min(answer, cnt);
		return;
	}

	if (state == 0) {			// 아직 1이 나오지 않은 상태
		if (arr[idx][0] == 1) {
			DFS(size, idx + 1, cnt + arr[idx][1], 0);
			DFS(size, idx + 1, cnt, 1);
		}
		else {
			DFS(size, idx + 1, cnt, 0);
			DFS(size, idx + 1, cnt + arr[idx][1], 1);
		}
	}
	else if (state == 1) {		// 1이 연속으로 나오고 있는 상태
		if (arr[idx][0] == 1) {
			DFS(size, idx + 1, cnt, 1);
			DFS(size, idx + 1, cnt + arr[idx][1], 2);
		}
		else {
			DFS(size, idx + 1, cnt + arr[idx][1], 1);
			DFS(size, idx + 1, cnt, 2);
		}
	}
	else {						// 연속으로 나오는 1이 끝난 상태
		if (arr[idx][0] == 1)
			DFS(size, idx + 1, cnt + arr[idx][1], 2);
		else
			DFS(size, idx + 1, cnt, 2);
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int T;
	cin >> T;

	for (int t = 1; t <= T; t++) {
		memset(arr, 0, sizeof(arr));
		answer = 300000*50000;
		int N, S, E;
		cin >> N >> S >> E;

		for (int n = 1; n <= N; n++)
			cin >> input[n];

		arr[1][0] = input[1];
		int chk_num = input[1];
		int chk_idx = 1;
		
		if (chk_num == 1)
			arr[chk_idx][1] = E;
		else
			arr[chk_idx][1] = S;

		for (int n = 2; n <= N; n++) {
			if (input[n] != chk_num) {
				chk_idx++;

				if (chk_num == 1) {
					chk_num = 0;
					arr[chk_idx][0] = chk_num;
					arr[chk_idx][1] = S;
				}
				else {
					chk_num = 1;
					arr[chk_idx][0] = chk_num;
					arr[chk_idx][1] = E;
				}
			}
			else {
				if (chk_num == 1)
					arr[chk_idx][1] += E;
				else
					arr[chk_idx][1] += S;
			}
		}

		if (arr[1][0] == 1) {
			DFS(chk_idx, 1, 0, 1);		// 1로 시작되어 가는 상태
			DFS(chk_idx, 1, 0, 0);		// 0으로 시작되어 가는 상태
		}
		else {
			DFS(chk_idx, 1, 0, 1);		// 1로 시작되어 가는 상태
			DFS(chk_idx, 1, 0, 0);			// 0으로 시작되어 가는 상태
		}

		cout << "Case #" << t << endl;
		cout << answer << endl;
	}

	return 0;
}
