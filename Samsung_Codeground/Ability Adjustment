#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
using namespace std;

vector<int> A;
vector<int> B;
long long dp[200001][4];

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int T;
	cin >> T;

	for (int tc = 1; tc <= T; tc++) {
		memset(dp, 0, sizeof(dp));
		A.clear();
		B.clear();

		int N;
		cin >> N;

		A.push_back(0);

		for (int n = 0; n < N; n++) {
			int in;
			cin >> in;
			A.push_back(in);
		}

		B.push_back(0);

		for (int n = 0; n < N; n++) {
			int in;
			cin >> in;
			B.push_back(in);
		}

		sort(A.begin(), A.end());
		sort(B.begin(), B.end());

		dp[1][0] = abs(A[1] - B[1]);
		dp[1][1] = dp[1][2] = dp[1][3] = 0;

		for (int i = 2; i <= N; i++) {
			dp[i][0] = dp[i - 1][0] + abs(A[i] - B[i]);
			dp[i][1] = min(dp[i - 1][0], dp[i - 1][1] + abs(A[i] - B[i - 1]));
			dp[i][2] = min(dp[i - 1][0], dp[i - 1][2] + abs(A[i - 1] - B[i]));
			dp[i][3] = min({ dp[i][1], dp[i][2], dp[i - 1][3] + abs(A[i] - B[i]) });
		}

		cout << "Case #" << tc << "\n";
		cout << min(dp[N][0], dp[N][3]) << "\n";
	}

	return 0;
}
