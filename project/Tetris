#include <stdio.h>
#include <conio.h>
#include <windows.h>
#include <time.h>
#include <stdlib.h>

int block[7][4][4][2] =
{
	{{{0, 0}, {0, 1}, {1, 0}, {1, 1}},  // ㅁㅁ
	{{0, 0}, {0, 1}, {1, 0}, {1, 1}},   // ㅁㅁ
	{{0, 0}, {0, 1}, {1, 0}, {1, 1}},
	{{0, 0}, {0, 1}, {1, 0}, {1, 1}}},

	{{{0, 0}, {0, 1}, {1, 1}, {1, 2}},  // ㅁㅁ
	{{0, 1}, {1, 0}, {1, 1}, {2, 0}},   //   ㅁㅁ
	{{0, 0}, {0, 1}, {1, 1}, {1, 2}},
	{{0, 1}, {1, 0}, {1, 1}, {2, 0}}},

	{{{0, 1}, {0, 2}, {1, 0}, {1, 1}},  //   ㅁㅁ
	{{0, 0}, {1, 0}, {1, 1}, {2, 1}},   // ㅁㅁ
	{{0, 1}, {0, 2}, {1, 0}, {1, 1}},
	{{0, 0}, {1, 0}, {1, 1}, {2, 1}}},

	{{{0, 0}, {0, 1}, {0, 2}, {0, 3}},  // ㅁㅁㅁㅁ
	{{0, 0}, {1, 0}, {2, 0}, {3, 0}},
	{{0, 0}, {0, 1}, {0, 2}, {0, 3}},
	{{0, 0}, {1, 0}, {2, 0}, {3, 0}}},

	{{{0, 1}, {1, 0}, {1, 1}, {1, 2}},  //    ㅁ
	{{0, 0}, {1, 0}, {1, 1}, {2, 0}},   //  ㅁㅁㅁ
	{{0, 0}, {0, 1}, {0, 2}, {1, 1}},
	{{0, 1}, {1, 0}, {1, 1}, {2, 1}}},

	{{{0, 0}, {1, 0}, {1, 1}, {1, 2}},  //  ㅁ
	{{0, 0}, {0, 1}, {1, 0}, {2, 0}},   //  ㅁㅁㅁ
	{{0, 0}, {0, 1}, {0, 2}, {1, 0}},
	{{0, 1}, {1, 1}, {2, 0}, {2, 1}}},

	{{{0, 2}, {1, 0}, {1, 1}, {1, 2}},  //      ㅁ
	{{0, 0}, {1, 0}, {2, 0}, {2, 1}},   //  ㅁㅁㅁ
	{{0, 0}, {0, 1}, {0, 2}, {1, 0}},
	{{0, 0}, {0, 1}, {1, 1}, {2, 1}}}
};

enum {
	LEFT = 0, RIGHT, DOWN
};


int now_t;
int step_time;
int y, x;
int rotation, type;

char Game_Board[22][12];

void Goto_XY(int x, int y) {
	COORD Pos;
	Pos.X = x * 2;
	Pos.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}

void New_Block()
{
	y = 1;
	x = 4;
	rotation = 0;
	type = rand() % 7;

	for (int i = 0; i < 4; i++)
		Game_Board[y + block[type][rotation][i][0]][x + block[type][rotation][i][1]] = (char)(type + 1);


}

int Check_Wall(int y, int x, int rotation)
{
	return 1;  //  벽에 닿음

	return 0;  // 벽에 안 닿음
}

int Check_Game_Over(void)
{
	return 1;  // 게임 오버

	return 0;  // 게임 계속
}

void Move_Block(int dir)
{

}

int Block_Down(void)
{
	return 0;		//블럭을 내릴 수 없을 때

	return 1;		//블럭을 내렸을 때
}

int Game_Playing(void)
{
	if (clock() - now_t > step_time)
		if (Block_Down())
			now_t = clock();

	int key = _getch();

	printf("%d\n", key);


	switch(key) {
	case 224:
		key = _getch();

		printf("%d\n", key);

		switch (key) {
		case 75:				//왼쪽 방향키
			if (Check_Wall(y, x - 1, rotation))
				Move_Block(LEFT);

			break;
		case 72:				//윗쪽 방향키


			break;
		case 77:				//오른쪽 방향키
			if (Check_Wall(y, x + 1, rotation))
				Move_Block(RIGHT);

			break;
		case 80:				//아래쪽 방향키
			if (Check_Wall(y + 1, x, rotation))
				Move_Block(DOWN);

			break;
		default:
			break;
		}

		break;
	case 32:			//스페이스키(회전)


		break;
	case 27:
		printf("게임 종료 : ESC 키\n");
		return 0;
		break;
	default:
		return 0;		//게임 종료
		break;
	}

	return 1;			//게임 계속
}

void Draw_Board(void)
{
	for (int row = 0; row < 22; row++) {
		for (int col = 0; col < 12; col++) {
			switch (Game_Board[row][col]) {
			case 0:
				Goto_XY(col, row);
				printf(" ");
				break;
			case 1:
				Goto_XY(col, row);
				printf("□");
				break;
			case 2:
				Goto_XY(col, row);
				printf("▤");
				break;
			case 3:
				Goto_XY(col, row);
				printf("▥");
				break;
			case 4:
				Goto_XY(col, row);
				printf("▨");
				break;
			case 5:
				Goto_XY(col, row);
				printf("▧");
				break;
			case 6:
				Goto_XY(col, row);
				printf("▦");
				break;
			case 7:
				Goto_XY(col, row);
				printf("▩");
				break;
			case 10:			//벽
				Goto_XY(col, row);
				printf("■");
				break;
			default:
				break;
			}
		}
	}
}

int main(void)
{
	srand(time(NULL));

	for (int i = 0; i < 22; i++)
		Game_Board[i][0] = Game_Board[i][11] = 10;

	for (int i = 0; i < 12; i++)
		Game_Board[0][i] = Game_Board[21][i] = 10;

	for (int i = 1; i < 11; i++)
		for (int k = 1; k < 21; k++)
			Game_Board[k][i] = Game_Board[k][i] = 0;

	Draw_Board();

	step_time = 1000;
	now_t = clock();

	while( Game_Playing() ) {
		Draw_Board();

		if (Check_Game_Over()) {
			printf("게임 오버\n");
			break;
		}
	}

	return 0;
}
