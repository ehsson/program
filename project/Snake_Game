#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>
#include <time.h>

#define EMPTY 0
#define WALL 10
#define BODY 1 // 뱀의 몸통
#define HEAD 2 // 뱀의 머리
#define FOOD 3
#define LEFT 75
#define UP 72
#define RIGHT 77
#define DOWN 80
#define ESC 27	// 종료

char Map[17][22];
int snake[100][2] = {
	{8, 7}, {8, 6}, {8, 5}, {8, 4}, {8, 3}
};

int hDirection; // head의 방향
int length; // 뱀의 길이
int score;
int fy, fx; // 먹이의 위치
int sleep_t;

void Goto_XY(int x, int y)
{
	COORD Pos;
	Pos.X = x * 2;
	Pos.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}

void CursorView()
{
	CONSOLE_CURSOR_INFO cursorInfo = { 0, };
	cursorInfo.dwSize = 1; //커서 굵기 (1 ~ 100)
	cursorInfo.bVisible = FALSE; //커서 Visible TRUE(보임) FALSE(숨김)
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursorInfo);
}

bool Check_Crush(int y, int x, int direction)
{
	if (Map[y][x] == WALL) {
		Goto_XY(10, 7);
		printf("쿵!");
		exit(0);
	}

	return false;
}

void Make_Food()
{
	while (true) {
		fy = rand() % 15 + 1;
		fx = rand() % 20 + 1;

		bool chk = true;

		for(int i = 0; i < length; i++)
			if (snake[i][0] == fy && snake[i][1] == fx) {
				chk = false;
				break;
			}

		if (chk) {
			Map[fy][fx] = FOOD;
			break;
		}
	}
}

void Check_Key()
{
	if (_kbhit()) {
		int key = _getch();

		switch (key) {
		case 224: // 방향키
			key = _getch();

			switch (key) {
			case LEFT:
				if (hDirection != RIGHT)
					hDirection = LEFT;

				break;
			case RIGHT:
				if (hDirection != LEFT)
					hDirection = RIGHT;

				break;
			case UP:
				if (hDirection != DOWN)
					hDirection = UP;

				break;
			case DOWN:
				if (hDirection != UP)
					hDirection = DOWN;

				break;
			default:
				break;
			}

			break;
		case ESC: // 종료
			Goto_XY(8, 7);
			printf("게임 종료");
			exit(0);
			break;
		}
	}
}

void forward()
{
	switch (hDirection) {
	case LEFT:
		if (!Check_Crush(snake[0][0], snake[0][1] - 1, LEFT)) {
			if (fy == snake[0][0] && fx == snake[0][1] - 1) {
				score++;
				snake[length][0] = snake[length - 1][0];
				snake[length][1] = snake[length - 1][1];
				length++;
				Make_Food();
			}
			else
				Map[snake[length - 1][0]][snake[length - 1][1]] = EMPTY;

			for (int i = length - 1; i > 0; i--) {
				Map[snake[i][0]][snake[i][1]] = EMPTY;

				snake[i][0] = snake[i - 1][0];
				snake[i][1] = snake[i - 1][1];
			}

			for (int i = 1; i < length; i++)
				Map[snake[i][0]][snake[i][1]] = BODY;

			snake[0][1]--;
			Map[snake[0][0]][snake[0][1]] = HEAD;
		}

		break;
	case RIGHT:
		if (!Check_Crush(snake[0][0], snake[0][1] + 1, RIGHT)) {
			if (fy == snake[0][0] && fx == snake[0][1] + 1) {
				score++;
				snake[length][0] = snake[length - 1][0];
				snake[length][1] = snake[length - 1][1];
				length++;
				Make_Food();
			}
			else
				Map[snake[length - 1][0]][snake[length - 1][1]] = EMPTY;

			for (int i = length - 1; i > 0; i--) {
				Map[snake[i][0]][snake[i][1]] = EMPTY;

				snake[i][0] = snake[i - 1][0];
				snake[i][1] = snake[i - 1][1];
			}

			for (int i = 1; i < length; i++)
				Map[snake[i][0]][snake[i][1]] = BODY;

			snake[0][1]++;
			Map[snake[0][0]][snake[0][1]] = HEAD;
		}

		break;
	case UP:
		if (!Check_Crush(snake[0][0] - 1, snake[0][1], UP)) {
			if (fy == snake[0][0] - 1 && fx == snake[0][1]) {
				score++;
				snake[length][0] = snake[length - 1][0];
				snake[length][1] = snake[length - 1][1];
				length++;
				Make_Food();
			}
			else
				Map[snake[length - 1][0]][snake[length - 1][1]] = EMPTY;

			for (int i = length - 1; i > 0; i--) {
				Map[snake[i][0]][snake[i][1]] = EMPTY;

				snake[i][0] = snake[i - 1][0];
				snake[i][1] = snake[i - 1][1];
			}

			for (int i = 1; i < length; i++)
				Map[snake[i][0]][snake[i][1]] = BODY;

			snake[0][0]--;
			Map[snake[0][0]][snake[0][1]] = HEAD;
		}

		break;
	case DOWN:
		if (!Check_Crush(snake[0][0] + 1, snake[0][1], DOWN)) {
			if (fy == snake[0][0] + 1 && fx == snake[0][1]) {
				score++;
				snake[length][0] = snake[length - 1][0];
				snake[length][1] = snake[length - 1][1];
				length++;
				Make_Food();
			}
			else
				Map[snake[length - 1][0]][snake[length - 1][1]] = EMPTY;

			for (int i = length - 1; i > 0; i--) {
				Map[snake[i][0]][snake[i][1]] = EMPTY;

				snake[i][0] = snake[i - 1][0];
				snake[i][1] = snake[i - 1][1];
			}

			for (int i = 1; i < length; i++)
				Map[snake[i][0]][snake[i][1]] = BODY;

			snake[0][0]++;
			Map[snake[0][0]][snake[0][1]] = HEAD;
		}

		break;
	default:
		break;
	}
}

void Draw_Map()
{
	for (int row = 0; row < 17; row++) {
		for (int col = 0; col < 22; col++) {
			switch (Map[row][col]) {
			case EMPTY:
				Goto_XY(col, row);
				printf("  ");
				break;
			case WALL:
				Goto_XY(col, row);
				printf("■");
				break;
			case HEAD:
				Goto_XY(col, row);
				printf("●");
				break;
			case BODY:
				Goto_XY(col, row);
				printf("○");
				break;
			case FOOD:
				Goto_XY(col, row);
				printf("♧");
				break;
			default:
				break;
			}
		}
	}

	Goto_XY(25, 10);
	printf("♧ score: %d", score);
}

int main(void)
{
	CursorView();
	srand((unsigned)time(NULL));

	for (int i = 0; i < 22; i++)
		Map[0][i] = Map[16][i] = WALL;

	for (int i = 1; i < 16; i++)
		Map[i][0] = Map[i][21] = WALL;

	for (int i = 1; i <= 15; i++)
		for (int j = 1; j <= 20; j++)
			Map[i][j] = EMPTY;

	hDirection = RIGHT;
	length = 5;

	Map[snake[0][0]][snake[0][1]] = HEAD;

	for (int i = 1; i < length; i++)
		Map[snake[i][0]][snake[i][1]] = BODY;

	Make_Food();

	sleep_t = clock();

	while (true) {
		int t = clock() - sleep_t;

		if (t > 400) {
			forward();
			Draw_Map();
			sleep_t = clock();
		}

		Check_Key();
	}

	return 0;
}
