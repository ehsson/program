// https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5LrsUaDxcDFAXc&categoryId=AV5LrsUaDxcDFAXc&categoryType=CODE


//아빠 솔루션

#include <stdio.h>

int arr[1000002] = { 0 };

int get_max_peak(int start, int end) {
	int temp = 0;

	for (int i = start; i <= end; i++) {
		if (arr[i - 1] <= arr[i] && arr[i] >= arr[i + 1] && arr[i] >= arr[temp])
			temp = i;
	}

	return temp;
}

int main(void)
{
	int T, day, start, max_peak_pos;
	long long int sum;

	scanf_s("%d", &T);

	for (int t = 0; t < T; t++) {
		sum = 0;
		start = 2;

		scanf_s("%d", &day);

		for (int i = 1; i <= day; i++)
			scanf_s("%d", &arr[i]);

		arr[day + 1] = -1;

		while (1) {
			max_peak_pos = get_max_peak(start, day);
			if (max_peak_pos == 0 || start > day)
				break;

			for (int i = start - 1; i < max_peak_pos; i++) {
				if (arr[i] >= arr[max_peak_pos])
					continue;

				sum += arr[max_peak_pos] - arr[i];
			}

			start = max_peak_pos + 2;
		}

		printf("#%d %lld\n", t + 1, sum);
	}

	return 0;
}

// 현수 솔루션
/*
#include <stdio.h>

int arr[1000002] = { 0 };
int peak_point[2][500000] = { 0 };

int get_max_peak(int start, int end)
{
	int max = 0, temp = -1;
	
	for(int i = start; i < end; i++) {
		if(max < peak_point[1][i])
			temp = i;
	}
	
	return temp;
}

int main(void)
{
	int T, max_peak_val, max_peak_pos, day, cnt, start_arr, start;
	long long int sum;
	
	scanf("%d", &T);
	
	for(int t = 0; t < T; t++) {
		scanf("%d", &day);
		
		cnt = 0;
		start = 0;
		start_arr = 1;
		
		for(int i = 1; i <= day; i++)
			scanf("%d", &arr[i]);
		
		arr[day + 1] = -1;
		
		for(int i = 2; i < day; i++) {
			if(arr[i] >= arr[i - 1] && arr[i] >= arr[i + 1]) {
				peak_point[0][cnt] = i;
				peak_point[1][cnt] = arr[i];
				cnt++;
			}
		}
		
		peak_point[1][cnt] = -1;
		
		while(1) {
			if(get_max_peak(start, cnt) < 0)
				break;
			
			max_peak_val = peak_point[1][get_max_peak(start, cnt)];
			max_peak_pos = peak_point[0][get_max_peak(start, cnt)];
			
			for(int k = start_arr; k < max_peak_pos; k++) {
				if(arr[k] >= max_peak_val)
					continue;
				
				sum += max_peak_val - arr[k];
			}
			
			start_arr = peak_point[0][get_max_peak(start, cnt)] + 1;
			start = get_max_peak(start, cnt) + 1;
			
			if(max_peak_val == peak_point[1][cnt - 1])
				break;
		}
		
		printf("#%d %lld", t + 1, sum);
	}
	
	return 0;
}
*/
