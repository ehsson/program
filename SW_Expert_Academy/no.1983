#include <stdio.h>

void QuickSort(int arr[], int start, int end, int order) {
	if (start >= end)
		return;

	int pivot = start;
	int low = start + 1;
	int high = end;
	int temp;

	if (order == 0) {
		while (low <= high) {
			while (arr[low] <= arr[pivot] && low <= end)
				low++;

			while (arr[pivot] < arr[high])
				high--;

			if (low < high) {
				temp = arr[low];
				arr[low] = arr[high];
				arr[high] = temp;
			}
		}
	}
	else {
		while (low <= high) {
			while (arr[low] >= arr[pivot] && low <= end)
				low++;

			while (arr[pivot] > arr[high])
				high--;

			if (low < high) {
				temp = arr[low];
				arr[low] = arr[high];
				arr[high] = temp;
			}
		}
	}

	temp = arr[pivot];
	arr[pivot] = arr[high];
	arr[high] = temp;

	QuickSort(arr, start, high - 1, order);
	QuickSort(arr, high + 1, end, order);
}

int main(void)
{
	int input[101] = { 0 };
	char grade[10][3] = { "D0", "C-", "C0", "C+", "B-", "B0", "B+", "A-", "A0", "A+" };

	int T, N, K, mid, fin, task, K_val, pos;
	double per;

	scanf("%d", &T);

	for (int t = 1; t <= T; t++) {
		scanf("%d %d", &N, &K);

		for (int n = 1; n <= N; n++) {
			scanf("%d %d %d", &mid, &fin, &task);

			input[n] = mid * 35 + fin * 45 + task * 20;

			if (n == K)
				K_val = input[n];
		}

		QuickSort(input, 1, N, 0);

		for (int i = 1; i <= N; i++) {
			if (K_val == input[i]) {
				pos = i;
				break;
			}
		}

		per = (double)pos * 100.0 / (double)N;
		
		if(per == 100.0) {
			per /= 10.0;
			per -= 1.0;
		}
		else if((int)per % 10 == 0 && (int)(per * 10.0) % 10 == 0) {
			per /= 10.0;
			per -= 1.0;
		}
		else 
			per /= 10.0;

		printf("#%d %s\n", t, grade[(int)per]);
	}

	return 0;
}
