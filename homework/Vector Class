#include <iostream>
using namespace std;

template <typename T>
class Vector
{
	T* data;
	int length;
	int capacity;
public:
	Vector(int n = 1)
		: data(new T[n]), length(0), capacity(n)
	{}

	~Vector()
	{
		delete[] data;
	}

	void push_back(T s)
	{
		if (capacity <= length) {
			T* temp = new T[capacity * 2];

			for (int i = 0; i < length; i++)
				temp[i] = data[i];

			delete[] data;
			data = temp;
			capacity *= 2;
		}

		data[length] = s;
		length++;
	}

	T operator[](int i)
	{
		return data[i];
	}

	void remove(int x)
	{
		for (int i = x + 1; i < length; i++)
			data[i - 1] = data[i];

		length--;
	}

	int size()
	{
		return length;
	}
};

int main(void)
{
	Vector<int> int_vec;
	int_vec.push_back(3);
	int_vec.push_back(2);

	cout << "첫번째 원소 : " << int_vec[0] << endl;
	cout << "두번째 원소 : " << int_vec[1] << endl;

	Vector<string> string_vec;
	string_vec.push_back("hello");
	string_vec.push_back("world");

	cout << string_vec[0] << " " << string_vec[1] << endl;

	return 0;
}
