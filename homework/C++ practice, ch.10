// 10-1(1)

#include <iostream>
using namespace std;

class Point
{
	int xPos, yPos;
public:
	Point(int x = 0, int y = 0)
		:xPos(x), yPos(y)
	{}

	void ShowPosition(void) const
	{
		cout << "[" << xPos << "," << yPos << "]" << endl;
	}

	friend Point operator-(Point& ref1, Point& ref2);
};

Point operator-(Point& ref1, Point& ref2)
{
	Point pos(ref1.xPos - ref2.xPos, ref1.yPos - ref2.yPos);

	return pos;
}

int main(void)
{
	Point pos1(10, 20);
	Point pos2(2, 5);

	Point pos3 = pos1 - pos2;
	pos3.ShowPosition();

	return 0;
}

// 10-1(2, 3)

#include <iostream>
using namespace std;

class Point
{
	int xPos, yPos;
public:
	Point(int x = 0, int y = 0)
		:xPos(x), yPos(y)
	{}

	Point& operator+=(Point& ref)
	{
		xPos += ref.xPos;
		yPos += ref.yPos;

		return*this;
	}

	Point& operator-=(Point& ref)
	{
		xPos -= ref.xPos;
		yPos -= ref.yPos;

		return*this;
	}

	bool operator==(Point& ref)
	{
		if (xPos != ref.xPos || yPos != ref.yPos)
			return false;
		else return true;
	}

	bool operator!=(Point& ref)
	{
		if (xPos == ref.xPos || yPos == ref.yPos)
			return false;
		else 
			return true;
	}

	void ShowPosition(void) const
	{
		cout << "[" << xPos << "," << yPos << "]" << endl;
	}
};

int main(void)
{
	Point pos1(10, 20);
	Point pos2(10, 20);
	
	pos1 += pos2;
	pos1.ShowPosition();

	pos1 -= pos2;
	pos1.ShowPosition();

	if (pos1 == pos2)
		cout << "equal" << endl;
	else
		cout << "not equal" << endl;

	return 0;
}

// 10-2

#include <iostream>
using namespace std;

class Point
{
	int xPos, yPos;
public:
	Point(int x = 0, int y = 0)
		:xPos(x), yPos(y)
	{}

	Point& operator+=(Point& ref)
	{
		xPos += ref.xPos;
		yPos += ref.yPos;

		return*this;
	}

	Point operator-(void)
	{
		Point pos(-xPos, -yPos);

		return pos;
	}

	friend Point operator~(Point& ref);

	void ShowPosition(void) const
	{
		cout << "[" << xPos << "," << yPos << "]" << endl;
	}
};

Point operator~(Point& ref)
{
	Point pos(ref.yPos, ref.xPos);

	return pos;
}

int main(void)
{
	Point pos1(1, 2);
	Point pos2 = -pos1;
	pos2.ShowPosition();

	pos2 = ~pos1;
	pos2.ShowPosition();

	return 0;
}
