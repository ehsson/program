// Kruskal algorithm

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<pair<int, pair<int, int>>> v;
int parent[1001];

int find(int n)
{
	if (parent[n] == n)
		return n;
	else
		return parent[n] = find(parent[n]);
}

void Union(int a, int b)
{
	if (find(a) != find(b))
		parent[find(a)] = parent[find(b)];
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	int N, M;
	cin >> N >> M;

	for (int m = 0; m < M; m++) {
		int a, b, c;
		cin >> a >> b >> c;

		v.push_back(make_pair(c, make_pair(a, b)));
	}

	sort(v.begin(), v.end());

	for (int n = 1; n <= N; n++)
		parent[n] = n;

	int sum = 0;

	for (int m = 0; m < M; m++) {
		if (find(v[m].second.first) != find(v[m].second.second)) {
			Union(v[m].second.first, v[m].second.second);
			sum += v[m].first;
		}
	}

	cout << sum << "\n";

	return 0;
}

// Prim algorithm

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<pair<int, int>> v[1001];
bool visit[1001];

int prim()
{
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	pq.push(make_pair(0, 1));
	int answer = 0;

	while (!pq.empty()) {
		pair<int, int> cur = pq.top();
		pq.pop();

		if (visit[cur.second])
			continue;

		visit[cur.second] = true;
		answer += cur.first;

		for (int i = 0; i < v[cur.second].size(); i++) {
			if (!visit[v[cur.second][i].second])
				pq.push(make_pair(v[cur.second][i].first, v[cur.second][i].second));
		}
	}

	return answer;
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	int N, M;
	cin >> N >> M;

	for (int m = 0; m < M; m++) {
		int a, b, c;
		cin >> a >> b >> c;

		v[a].push_back(make_pair(c, b));
		v[b].push_back(make_pair(c, a));
	}

	cout << prim() << "\n";

	return 0;
}
