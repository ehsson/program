#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <cstring>
using namespace std;

#define WALL -1

int N, M;
int key_cnt;

int map[51][51];
bool visit[51][51];
vector <pair<int, pair<int, int>>> v[251];
int parent[251];

int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };

int point[251][2];

priority_queue<pair<int, pair<int, int>>> pq;

int get_parent(int num)
{
	if (parent[num] == num)
		return num;

	return parent[num] = get_parent(parent[num]);
}

void make_union(int a, int b)
{
	a = get_parent(a);
	b = get_parent(b);

	if (a < b)
		parent[b] = a;
	else
		parent[a] = b;
}

int kruskal()
{
	int sum = 0;

	while (!pq.empty()) {
		int dis = -pq.top().first;
		int p1 = pq.top().second.first;
		int p2 = pq.top().second.second;
		pq.pop();

		if (get_parent(p1) != get_parent(p2)) {
			make_union(p1, p2);
			sum += dis;
		}
	}

	return sum;
}

bool BFS(int sy, int sx, int number)
{
	int count = 0;
	memset(visit, false, sizeof(visit));
	queue<pair<pair<pair<int, int>, int>, int>> q; // (((y, x), cnt), num)
	q.push({ {{sy, sx}, 0}, number });
	visit[sy][sx] = true;

	while (!q.empty()) {
		int y = q.front().first.first.first;
		int x = q.front().first.first.second;
		int cnt = q.front().first.second;
		int num = q.front().second;
		q.pop();

		if (map[y][x] > 0 && map[y][x] != num) {
			pq.push({ -cnt, {num, map[y][x]} });
			count++;
		}

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (map[ny][nx] != WALL && !visit[ny][nx]) {
				q.push({ {{ny, nx}, cnt + 1}, num });
				visit[ny][nx] = true;
			}
		}
	}

	if (count < key_cnt - 1)
		return false;
	else
		return true;
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> M;

	for (int i = 1; i <= N; i++) {
		string s;
		cin >> s;

		for (int j = 0; j < N; j++)
			if (s[j] == '1')
				map[i][j + 1] = WALL;
			else if (s[j] == '0')
				map[i][j + 1] = 0;
			else {
				key_cnt++;
				map[i][j + 1] = key_cnt;
				point[key_cnt][0] = i;
				point[key_cnt][1] = j + 1;
			}
	}

	for (int i = 1; i <= key_cnt; i++) {
		parent[i] = i;
		if (!BFS(point[i][0], point[i][1], i)) {
			cout << "-1\n";
			return 0;
		}
	}

	cout << kruskal() << "\n";

	return 0;
}
