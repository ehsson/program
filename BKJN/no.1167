#include <iostream>
#include <vector>
using namespace std;

vector<pair<int, int>> v[100001];
bool visit[100001];

int y;
int _max;

void DFS(int node, int sum)
{
	if (_max < sum) {
		_max = sum;
		y = node;
	}

	for (int i = 0; i < v[node].size(); i++) {
		int next = v[node][i].first;
		int dis = v[node][i].second;

		if (!visit[next]) {
			visit[next] = true;
			DFS(next, sum + dis);
			visit[next] = false;
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int V;
	cin >> V;

	for (int k = 1; k <= V; k++) {
		int i;
		cin >> i;

		while (true) {
			int in, dis;
			cin >> in;
					
			if (in == -1)
				break;

			cin >> dis;

			v[i].push_back({ in, dis });
		}
	}

	visit[1] = true;
	DFS(1, 0);
	visit[1] = false;

	_max = 0;
	visit[y] = true;
	DFS(y, 0);

	cout << _max << "\n";

	return 0;
}
