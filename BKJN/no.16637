1st

#include <stdio.h>

char input[19];
int num[10];
char oper[9];
int N;

int max(int a, int b)
{
	if (a >= b)
		return a;
	else
		return b;
}

int operation(int a, int b, char op)
{
	switch (op)
	{
		case '+':
			return a + b;
			break;
		case '-':
			return a - b;
			break;
		case '*':
			return a * b;
			break;
		default:
			break;
	}
}

int DFS(int n, int res)
{
	if (n == (int)(N / 2))
		return res;

	int val = DFS(n + 1, operation(res, num[n + 1], oper[n]));

	if (n + 2 <= (int)(N / 2))
	{
		int temp = operation(num[n + 1], num[n + 2], oper[n + 1]);

		val = max(val, DFS(n + 2, operation(res, temp, oper[n])));
	}

	return val;
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);

	scanf_s("%d", &N);

	scanf_s("%s", input, N + 1);

	for (int n = 0; n < N; n++)
	{
		if (n & 1)
			oper[(int)(n / 2)] = input[n];
		else
			num[n / 2] = (int)(input[n] - 48);
	}

	printf("%d\n", DFS(0, num[0]));

	return 0;
}

2nd

#include <stdio.h>

char input[19];
int num[10];
int save[9];
char oper[9];
int N;
int max = 0b1111111111111111111111111111111 + 1;

int operate(int a, int b, char op)
{
	switch (op)
	{
	case '+':
		return a + b;
		break;
	case '-':
		return a - b;
		break;
	case '*':
		return a * b;
		break;
	default:
		break;
	}
}

void DFS(int pos, int sum)
{
	if (pos >= (int)(N / 2))
	{
		if (max < sum)
			max = sum;

		return;
	}

	if(pos + 2 <= (int)(N / 2))
		DFS(pos + 2, operate(sum, save[pos + 1], oper[pos]));

	DFS(pos + 1, operate(sum, num[pos + 1], oper[pos]));
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	scanf_s("%d", &N);

	scanf_s("%s", input, N + 1);

	for (int n = 0; n < N; n++)
	{
		if (n & 1)
			oper[(int)(n / 2)] = input[n];
		else
			num[n / 2] = input[n] - '0';
	}

	for (int i = 0; i < (int)(N / 2); i++)
		save[i] = operate(num[i], num[i + 1], oper[i]);

	DFS(0, num[0]);

	printf("%d\n", max);

	return 0;
}


// C++

#include <iostream>
using namespace std;

char input[19];
int num[10];
char op[9];
int save[9];

int N;
int max_sum = 0b1111111111111111111111111111111 + 1;

int operate(int a, int b, char c)
{
	switch (c)
	{
		case '+':
			return (a + b);
			break;
		case '-':
			return (a - b);
			break;
		case '*':
			return (a * b);
			break;
		default:
			break;
	}
}

void DFS(int pos, int sum)
{
	if (pos >= (int)(N / 2))
	{
		if (sum > max_sum)
			max_sum = sum;

		return;
	}

	if(pos + 1 < (int)(N / 2))
		DFS(pos + 2, operate(sum, save[pos + 1], op[pos]));

	DFS(pos + 1, operate(sum, num[pos + 1], op[pos]));
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);

	cin >> N;

	cin >> input;

	for (int n = 0; n < N; n++)
	{
		if (n & 1)
			op[n / 2] = input[n];
		else
			num[n / 2] = input[n] - '0';
	}

	for (int i = 0; i < N / 2; i++)
		save[i] = operate(num[i], num[i + 1], op[i]);

	DFS(0, num[0]);

	cout << max_sum;

	return 0;
}
