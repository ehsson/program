#include <iostream>
#include <queue>
#include <string>
using namespace std;

int map[1000][1000];
int visit[1000][1000][2];
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };

int N, M;
int _min;

bool IsInside(int y, int x)
{
	if (y >= 0 && y < N && x >= 0 && x < M)
		return true;
	else
		return false;
}

int BFS()
{
	queue<pair<pair<int, int>, int>> q;
	q.push(make_pair(make_pair(0, 0), 0));
	visit[0][0][0] = 1;

	while (!q.empty()) {
		int y = q.front().first.first;
		int x = q.front().first.second;
		int block = q.front().second;
		q.pop();

		if (y == N - 1 && x == M - 1)
			return visit[y][x][block];

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (IsInside(ny, nx)) {
				if (map[ny][nx] && !block) {
					visit[ny][nx][1] = visit[y][x][block] + 1;
					q.push(make_pair(make_pair(ny, nx), 1));
				}
				else if (!map[ny][nx] && !visit[ny][nx][block]) {
					visit[ny][nx][block] = visit[y][x][block] + 1;
					q.push(make_pair(make_pair(ny, nx), block));
				}
			}
		}
	}

	return -1;
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N >> M;

	for (int n = 0; n < N; n++) {
		string s;
		cin >> s;

		for (int m = 0; m < M; m++) 
			map[n][m] = s[m] - '0';
	}

	cout << BFS() << "\n";

	return 0;
}
