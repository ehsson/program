#include <iostream>
using namespace std;

int N;
int answer;
int board[20][20];

enum {
	Right = 0, Down, Left, Up
};

void move(int direction)
{
	int temp;

	switch (direction) {
	case Right:
		for (int y = 0; y < N; y++) {
			for (int x = N - 2; x >= 0; x--) {
				if (!board[y][x])
					continue;

				temp = 1;

				while (x + temp < N) {
					if (board[y][x + temp]) {
						if (board[y][x + temp] == board[y][x]) {
							board[y][x + temp] *= -2;
							board[y][x] = 0;
						}
						else {
							if (temp > 1) {
								board[y][x + temp - 1] = board[y][x];
								board[y][x] = 0;
							}
						}

						break;
					}

					if (x + temp == N - 1) {
						board[y][x + temp] = board[y][x];
						board[y][x] = 0;
					}

					temp++;
				}
			}
		}

		break;
	case Down:
		for (int x = 0; x < N; x++) {
			for (int y = N - 2; y >= 0; y--) {
				if (!board[y][x])
					continue;

				temp = 1;

				while (y + temp < N) {
					if (board[y + temp][x]) {
						if (board[y + temp][x] == board[y][x]) {
							board[y + temp][x] *= -2;
							board[y][x] = 0;
						}
						else {
							if (temp > 1) {
								board[y + temp - 1][x] = board[y][x];
								board[y][x] = 0;
							}
						}

						break;
					}

					if (y + temp == N - 1) {
						board[y + temp][x] = board[y][x];
						board[y][x] = 0;
					}

					temp++;
				}
			}
		}

		break;
	case Left:
		for (int y = 0; y < N; y++) {
			for (int x = 1; x < N; x++) {
				if (!board[y][x])
					continue;

				temp = 1;

				while (x - temp >= 0) {
					if (board[y][x - temp]) {
						if (board[y][x - temp] == board[y][x]) {
							board[y][x - temp] *= -2;
							board[y][x] = 0;
						}
						else {
							if (temp > 1) {
								board[y][x - temp + 1] = board[y][x];
								board[y][x] = 0;
							}
						}

						break;
					}

					if (x - temp == 0) {
						board[y][x - temp] = board[y][x];
						board[y][x] = 0;
					}

					temp++;
				}
			}
		}

		break;
	case Up:
		for (int x = 0; x < N; x++) {
			for (int y = 1; y < N; y++) {
				if (!board[y][x])
					continue;

				temp = 1;

				while (y - temp >= 0) {
					if (board[y - temp][x]) {
						if (board[y - temp][x] == board[y][x]) {
							board[y - temp][x] *= -2;
							board[y][x] = 0;
						}
						else {
							if (temp > 1) {
								board[y - temp + 1][x] = board[y][x];
								board[y][x] = 0;
							}
						}

						break;
					}

					if (y - temp == 0) {
						board[y - temp][x] = board[y][x];
						board[y][x] = 0;
					}

					temp++;
				}
			}
		}

		break;
	}
}

void DFS(int cnt)
{
	if (cnt == 5) {
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				if(board[i][j] < 0)
					answer = max(answer, -board[i][j]);
				else
					answer = max(answer, board[i][j]);

		return;
	}
	
	int copyBoard[20][20];

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			if (board[i][j] < 0) {
				board[i][j] *= -1;
				copyBoard[i][j] = board[i][j];
			}
			else
				copyBoard[i][j] = board[i][j];

	for (int i = 0; i < 4; i++) {
		move(i);

		DFS(cnt + 1);

		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				board[i][j] = copyBoard[i][j];
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			cin >> board[i][j];

	DFS(0);

	cout << answer << "\n";

	return 0;
}


// using queue

/*

#include <iostream>
using namespace std;

int N;
int answer;
int board[20][20];

enum {
	Right = 0, Down, Left, Up
};

void move(int direction)
{
	int temp;

	switch (direction) {
	case Right:
		for (int y = 0; y < N; y++) {
			for (int x = N - 2; x >= 0; x--) {
				if (!board[y][x])
					continue;

				temp = 1;

				while (x + temp < N) {
					if (board[y][x + temp]) {
						if (board[y][x + temp] == board[y][x]) {
							board[y][x + temp] *= -2;
							board[y][x] = 0;
						}
						else {
							if (temp > 1) {
								board[y][x + temp - 1] = board[y][x];
								board[y][x] = 0;
							}
						}

						break;
					}

					if (x + temp == N - 1) {
						board[y][x + temp] = board[y][x];
						board[y][x] = 0;
					}

					temp++;
				}
			}
		}

		break;
	case Down:
		for (int x = 0; x < N; x++) {
			for (int y = N - 2; y >= 0; y--) {
				if (!board[y][x])
					continue;

				temp = 1;

				while (y + temp < N) {
					if (board[y + temp][x]) {
						if (board[y + temp][x] == board[y][x]) {
							board[y + temp][x] *= -2;
							board[y][x] = 0;
						}
						else {
							if (temp > 1) {
								board[y + temp - 1][x] = board[y][x];
								board[y][x] = 0;
							}
						}

						break;
					}

					if (y + temp == N - 1) {
						board[y + temp][x] = board[y][x];
						board[y][x] = 0;
					}

					temp++;
				}
			}
		}

		break;
	case Left:
		for (int y = 0; y < N; y++) {
			for (int x = 1; x < N; x++) {
				if (!board[y][x])
					continue;

				temp = 1;

				while (x - temp >= 0) {
					if (board[y][x - temp]) {
						if (board[y][x - temp] == board[y][x]) {
							board[y][x - temp] *= -2;
							board[y][x] = 0;
						}
						else {
							if (temp > 1) {
								board[y][x - temp + 1] = board[y][x];
								board[y][x] = 0;
							}
						}

						break;
					}

					if (x - temp == 0) {
						board[y][x - temp] = board[y][x];
						board[y][x] = 0;
					}

					temp++;
				}
			}
		}

		break;
	case Up:
		for (int x = 0; x < N; x++) {
			for (int y = 1; y < N; y++) {
				if (!board[y][x])
					continue;

				temp = 1;

				while (y - temp >= 0) {
					if (board[y - temp][x]) {
						if (board[y - temp][x] == board[y][x]) {
							board[y - temp][x] *= -2;
							board[y][x] = 0;
						}
						else {
							if (temp > 1) {
								board[y - temp + 1][x] = board[y][x];
								board[y][x] = 0;
							}
						}

						break;
					}

					if (y - temp == 0) {
						board[y - temp][x] = board[y][x];
						board[y][x] = 0;
					}

					temp++;
				}
			}
		}

		break;
	}
}

void DFS(int cnt)
{
	if (cnt == 5) {
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				if(board[i][j] < 0)
					answer = max(answer, -board[i][j]);
				else
					answer = max(answer, board[i][j]);

		return;
	}
	
	int copyBoard[20][20];

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			if (board[i][j] < 0) {
				board[i][j] *= -1;
				copyBoard[i][j] = board[i][j];
			}
			else
				copyBoard[i][j] = board[i][j];

	for (int i = 0; i < 4; i++) {
		move(i);

		DFS(cnt + 1);

		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				board[i][j] = copyBoard[i][j];
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			cin >> board[i][j];

	DFS(0);

	cout << answer << "\n";

	return 0;
}

*/

#include <iostream>
#include <queue>
using namespace std;

int N, answer;
int board[20][20];

enum {
	Right = 0, Down, Left, Up
};

void move(int direction)
{
	int idx;
	queue<int> q;

	switch (direction) {
	case Right:
		for (int y = 0; y < N; y++) {
			idx = N - 1;

			for (int x = N - 1; x >= 0; x--)
				if (board[y][x]) {
					q.push(board[y][x]);
					board[y][x] = 0;
				}

			while (!q.empty()) {
				int cur = q.front();
				q.pop();

				if (!board[y][idx])
					board[y][idx] = cur;
				else if (board[y][idx] == cur) {
					board[y][idx] *= 2;
					idx--;
				}
				else if (board[y][idx] != cur) {
					idx--;
					board[y][idx] = cur;
				}
			}
		}

		break;
	case Down:
		for (int x = 0; x < N; x++) {
			idx = N - 1;

			for (int y = N - 1; y >= 0; y--)
				if (board[y][x]) {
					q.push(board[y][x]);
					board[y][x] = 0;
				}

			while (!q.empty()) {
				int cur = q.front();
				q.pop();

				if (!board[idx][x])
					board[idx][x] = cur;
				else if (board[idx][x] == cur) {
					board[idx][x] *= 2;
					idx--;
				}
				else if (board[idx][x] != cur) {
					idx--;
					board[idx][x] = cur;
				}
			}
		}

		break;
	case Left:
		for (int y = 0; y < N; y++) {
			idx = 0;

			for (int x = 0; x < N; x++)
				if (board[y][x]) {
					q.push(board[y][x]);
					board[y][x] = 0;
				}

			while (!q.empty()) {
				int cur = q.front();
				q.pop();

				if (!board[y][idx])
					board[y][idx] = cur;
				else if (board[y][idx] == cur) {
					board[y][idx] *= 2;
					idx++;
				}
				else if (board[y][idx] != cur) {
					idx++;
					board[y][idx] = cur;
				}
			}
		}

		break;
	case Up:
		for (int x = 0; x < N; x++) {
			idx = 0;

			for (int y = 0; y < N; y++)
				if (board[y][x]) {
					q.push(board[y][x]);
					board[y][x] = 0;
				}

			while (!q.empty()) {
				int cur = q.front();
				q.pop();

				if (!board[idx][x])
					board[idx][x] = cur;
				else if (board[idx][x] == cur) {
					board[idx][x] *= 2;
					idx++;
				}
				else if (board[idx][x] != cur) {
					idx++;
					board[idx][x] = cur;
				}
			}
		}

		break;
	}
}

void DFS(int cnt)
{
	if (cnt == 5) {
		for (int y = 0; y < N; y++)
			for (int x = 0; x < N; x++)
				answer = max(answer, board[y][x]);

		return;
	}

	int copyBoard[20][20];

	for (int y = 0; y < N; y++)
		for (int x = 0; x < N; x++)
			copyBoard[y][x] = board[y][x];

	for (int i = 0; i < 4; i++) {
		move(i);

		DFS(cnt + 1);

		for (int y = 0; y < N; y++)
			for (int x = 0; x < N; x++)
				board[y][x] = copyBoard[y][x];
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			cin >> board[i][j];

	DFS(0);

	cout << answer << "\n";

	return 0;
}
