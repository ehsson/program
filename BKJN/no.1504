#include <iostream>
using namespace std;

#define MAX 800000

int graph[801][801];

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	int N, E;
	cin >> N >> E;

	for (int y = 1; y <= N; y++)
		for (int x = 1; x <= N; x++)
			if (y == x)
				graph[y][x] = 0;
			else
				graph[y][x] = MAX;
	
	for (int e = 0; e < E; e++) {
		int a, b, c;
		cin >> a >> b >> c;

		graph[a][b] = c;
		graph[b][a] = c;
	}

	int v1, v2;
	cin >> v1 >> v2;

	for (int k = 1; k <= N; k++)
		for (int i = 1; i <= N; i++)
			for (int j = 1; j <= N; j++)
				graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);

	if ((graph[1][v1] == MAX || graph[v1][v2] == MAX || graph[v2][N] == MAX) && 
		(graph[1][v2] == MAX || graph[v2][v1] || graph[v1][N] == MAX))
		cout << "-1";
	else
		cout << min(graph[1][v1] + graph[v1][v2] + graph[v2][N],
			graph[1][v2] + graph[v2][v1] + graph[v1][N]);

	return 0;
}


// Use Dijkstra

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

#define MAX 800000

vector<pair<int, int>> graph[801];
int visit[801];

vector<int> dijkstra(int start, int vertex)
{
	vector<int> distance(vertex, MAX);
	distance[start] = 0;

	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	pq.push({ 0, start });

	while (!pq.empty()) {
		int cost = pq.top().first;
		int cur = pq.top().second;
		pq.pop();

		if (distance[cur] < cost)
			continue;

		for (int i = 0; i < graph[cur].size(); i++) {
			int neighbor = graph[cur][i].first;
			int neighbor_distance = cost + graph[cur][i].second;

			if (distance[neighbor] > neighbor_distance) {
				distance[neighbor] = neighbor_distance;
				visit[neighbor] = cur;
				pq.push({ neighbor_distance, neighbor });
			}
		}
	}

	return distance;
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	int N, E;
	cin >> N >> E;
	
	for (int e = 0; e < E; e++) {
		int a, b, c;
		cin >> a >> b >> c;

		graph[a].push_back({ b, c });
		graph[b].push_back({ a, c });
	}

	int v1, v2;
	cin >> v1 >> v2;

	vector<int> result = dijkstra(1, N + 1);
	vector<int> temp1 = dijkstra(v1, N + 1);
	vector<int> temp2 = dijkstra(v2, N + 1);

	int answer = min(result[v1] + temp1[v2] + temp2[N], result[v2] + temp2[v1] + temp1[N]);

	if (answer >= MAX)
		cout << "-1";
	else
		cout << answer;

	return 0;
}
