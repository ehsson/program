#include <iostream>
#include <queue>
#include <vector>
using namespace std;

char map[1500][1500];
bool visit[1500][1500];

int dy[4] = { 1, 0, -1, 0 };
int dx[4] = { 0, 1, 0, -1 };

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int R, C;
	cin >> R >> C;

	queue<pair<int, int>> q;
	queue<pair<int, int>> waterQ;

	for (int r = 0; r < R; r++) {
		cin >> map[r];

		for (int c = 0; c < C; c++) {
			if (map[r][c] == 'L' && q.empty()) {
				q.push({ r, c });
				visit[r][c] = true;
				map[r][c] = '.';
			}

			if (map[r][c] == 'L' || map[r][c] == '.')
				waterQ.push({ r, c });
		}
	}

	int cnt = 0;

	while (true) {
		queue<pair<int, int>> nextQ;

		bool flag = false;

		while (!q.empty()) {
			int y = q.front().first;
			int x = q.front().second;
			q.pop();

			if (map[y][x] == 'L') {
				flag = true;
				break;
			}

			for (int i = 0; i < 4; i++) {
				int ny = y + dy[i];
				int nx = x + dx[i];

				if (ny >= 0 && ny < R && nx >= 0 && nx < C && !visit[ny][nx]) {
					visit[ny][nx] = true;

					if (map[ny][nx] == 'X')
						nextQ.push({ ny, nx });
					else
						q.push({ ny, nx });
				}
			}
		}

		if (flag)
			break;

		q = nextQ;

		int waterSize = waterQ.size();

		while (waterSize--) {
			int y = waterQ.front().first;
			int x = waterQ.front().second;
			waterQ.pop();

			for (int i = 0; i < 4; i++) {
				int ny = y + dy[i];
				int nx = x + dx[i];

				if (ny >= 0 && ny < R && nx >= 0 && nx < C && map[ny][nx] == 'X') {
					map[ny][nx] = '.';
					waterQ.push({ ny, nx });
				}
			}
		}

		cnt++;
	}

	cout << cnt << "\n";

	return 0;
}
