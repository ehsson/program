#include <iostream>
#include <vector>
#include <queue>
using namespace std;

#define INF 0b1111111111111111111111111111111
vector<pair<int, int>> vec[20001];

vector<int> dijkstra(int start, int vertex)
{
	vector<int> distance(vertex, INF);
	distance[start] = 0;

	priority_queue<pair<int, int>> pq;
	pq.push({ 0, start });

	while (!pq.empty()) {
		int cost = -pq.top().first;
		int curVertex = pq.top().second;
		pq.pop();

		if (distance[curVertex] < cost)
			continue;

		for (int i = 0; i < vec[curVertex].size(); i++) {
			int neighbor = vec[curVertex][i].first;
			int neighborDistance = cost + vec[curVertex][i].second;

			if (distance[neighbor] > neighborDistance) {
				distance[neighbor] = neighborDistance;
				pq.push({ -neighborDistance, neighbor });
			}
		}
	}

	return distance;
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	int V, E, start;
	cin >> V >> E;
	cin >> start;

	for (int e = 1; e <= E; e++) {
		int u, v, w;
		cin >> u >> v >> w;
		
		vec[u].push_back({ v, w });
	}

	vector<int> result = dijkstra(start, V + 1);

	for (int i = 1; i <= V; i++) {
		if (result[i] == INF)
			cout << "INF\n";
		else
			cout << result[i] << "\n";
	}

	return 0;
}
