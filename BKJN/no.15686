#include <iostream>
#include <vector>
using namespace std;

int map[50][50];
int N, M;
int _min = 0b1111111111111111111111111111111;
vector<pair<int, int>> house;
vector<pair<int, int>> chicken;
vector<bool> chk;

int get_distance(int i, int j)
{
	return abs(chicken[j].first - house[i].first) + abs(chicken[j].second - house[i].second);
}

void DFS(int n, int cnt)
{
	if (cnt == M) {
		int sum = 0;

		for (int i = 0; i < house.size(); i++) {
			int temp = 100;

			for (int j = 0; j < chicken.size(); j++) {
				if (chk[j]) {
					temp = min(temp, get_distance(i, j));
				}
			}

			sum += temp;
		}

		_min = min(_min, sum);

		return;
	}

	if (n == chicken.size())
		return;

	chk[n] = true;
	DFS(n + 1, cnt + 1);
	chk[n] = false;
	DFS(n + 1, cnt);
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N >> M;
	
	for(int y = 0; y < N; y++)
		for (int x = 0; x < N; x++) {
			cin >> map[y][x];

			if (map[y][x] == 1)
				house.push_back(make_pair(y, x));
			else if (map[y][x] == 2) {
				chicken.push_back(make_pair(y, x));
				chk.push_back(false);
			}
		}

	DFS(0, 0);

	cout << _min << "\n";
}
