#include <iostream>
#include <queue>
using namespace std;

char map[50][50];
int water_chk[50][50];
int chk[50][50];
queue<pair<int, int>> q;
queue<pair<int, int>> water_q;
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };
int N, M;

bool IsInside(int y, int x)
{
	if (y >= 0 && y < N && x >= 0 && x < M)
		return true;
	else
		return false;
}

void water_BFS()
{
	while (!water_q.empty()) {
		int y = water_q.front().first;
		int x = water_q.front().second;
		water_q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (IsInside(ny, nx) && (map[ny][nx] == '.' || map[ny][nx] == 'S') && water_chk[ny][nx] == 0) {
				water_chk[ny][nx] = water_chk[y][x] + 1;
				water_q.push(make_pair(ny, nx));
			}
		}
	}
}

void BFS()
{
	while (!q.empty()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (IsInside(ny, nx) && (map[ny][nx] == '.' || map[ny][nx] == 'D') && chk[ny][nx] == 0) {
				if (water_chk[ny][nx] == 0) {
					chk[ny][nx] = chk[y][x] + 1;
					q.push(make_pair(ny, nx));
				}
				else {
					if (chk[y][x] + 1 < water_chk[ny][nx]) {
						chk[ny][nx] = chk[y][x] + 1;
						q.push(make_pair(ny, nx));
					}
				}
			}
		}
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N >> M;

	int answer_y, answer_x;

	for (int n = 0; n < N; n++)
		for (int m = 0; m < M; m++) {
			cin >> map[n][m];

			if (map[n][m] == '*') {
				water_q.push(make_pair(n, m));
			}
			else if (map[n][m] == 'S') {
				q.push(make_pair(n, m));
			}
			else if (map[n][m] == 'D') {
				answer_y = n;
				answer_x = m;
			}
		}

	water_BFS();

	BFS();

	if (chk[answer_y][answer_x])
		cout << chk[answer_y][answer_x] << "\n";
	else
		cout << "KAKTUS" << "\n";

	return 0;
}
