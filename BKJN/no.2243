#include <iostream>
using namespace std;

int tree[4000001];

int N;

int get_num(int start, int end, int node, int sum)
{
	if (start == end)
		return start;

	int mid = (start + end) / 2;

	if (sum > tree[node * 2])
		return get_num(mid + 1, end, node * 2 + 1, sum - tree[node * 2]);
	else
		return get_num(start, mid, node * 2, sum);
}

void update(int start, int end, int node, int idx, int diff)
{
	if (idx < start || idx > end)
		return;

	tree[node] += diff;

	if (start != end) {
		int mid = (start + end) / 2;

		update(start, mid, node * 2, idx, diff);
		update(mid + 1, end, node * 2 + 1, idx, diff);
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N;

	for (int n = 0; n < N; n++) {
		int a, b;
		cin >> a >> b;

		if (a == 1) {
			int answer = get_num(1, 1000000, 1, b);
			
			cout << answer << "\n";

			update(1, 1000000, 1, answer, -1);
		}
		else if (a == 2) {
			int c;
			cin >> c;

			update(1, 1000000, 1, b, c);
		}
	}

	return 0;
}
