#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <queue>
#include <algorithm>
using namespace std;

vector<int> v[1001];
bool visit[1001];

int N, M, start;

void DFS(int pos)
{
	visit[pos] = true;
	cout << pos << " ";

	vector<int>::iterator itr;
	for (itr = v[pos].begin(); itr != v[pos].end(); itr++) {
		if (!visit[*itr])
			DFS(*itr);
	}
}

void BFS(int start)
{
	queue<int> q;
	q.push(start);
	visit[start] = true;

	while (!q.empty()) {
		int x = q.front();
		q.pop();
		cout << x << " ";

		for (int i = 0; i < v[x].size(); i++) {
			int y = v[x][i];

			if (!visit[y]) {
				q.push(y);
				visit[y] = true;
			}
		}
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N >> M >> start;

	for (int m = 1; m <= M; m++) {
		int input1, input2;
		cin >> input1 >> input2;

		v[input1].push_back(input2);
		v[input2].push_back(input1);
	}

	for (int n = 1; n <= N; n++)
		sort(v[n].begin(), v[n].end());

	DFS(start);

	cout << "\n";

	memset(visit, false, sizeof(bool) * (N + 1));

	BFS(start);

	return 0;
}
