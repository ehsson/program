#include <iostream>
using namespace std;

#define MIN -100000000

int map[1001][1001];
int dp[1001][1001][3]; // D, R, L
bool visit[1002][1002];
int dy[3] = { 1, 0, 0 };
int dx[3] = { 0, 1, -1 };
int N, M;

int DFS(int y, int x, int direction)
{
	if (y == N && x == M)
		return map[y][x];

	if (direction == 1) {// R
		if (dp[y][x][1] != MIN)
			return max(dp[y][x][0], dp[y][x][1]);
	}
	else if (direction == 2) {// L
		if (dp[y][x][2] != MIN)
			return max(dp[y][x][0], dp[y][x][2]);
	}
	else {
		if(dp[y][x][1] != MIN && dp[y][x][2] != MIN)
			return max(dp[y][x][0], max(dp[y][x][1], dp[y][x][2]));
	}

	visit[y][x] = true;

	for (int i = 0; i < 3; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];

		if (ny >= 1 && ny <= N && nx >= 1 && nx <= M && !visit[ny][nx])
			dp[y][x][i] = max(dp[y][x][i], DFS(ny, nx, i) + map[y][x]);
	}

	visit[y][x] = false;

	if (direction == 1) // R
		return max(dp[y][x][0], dp[y][x][1]);
	else if (direction == 2) // L
		return max(dp[y][x][0], dp[y][x][2]);
	else
		return max(dp[y][x][0], max(dp[y][x][1], dp[y][x][2]));
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> M;

	for (int n = 1; n <= N; n++)
		for (int m = 1; m <= M; m++) {
			cin >> map[n][m];

			for (int i = 0; i < 3; i++)
				dp[n][m][i] = -100000000;
		}

	cout << DFS(1, 1, 0) << "\n";

	return 0;
}
