#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int cnt[10001];
vector<int> v[10001];
bool visit[10001];
int dp[10001][2];

void DFS(int node)
{
	visit[node] = true;
	dp[node][0] = 0;
	dp[node][1] = cnt[node];

	for (int i = 0; i < v[node].size(); i++) {
		int next = v[node][i];

		if (!visit[next]) {
			DFS(next);
			dp[node][0] += max(dp[next][0], dp[next][1]);
			dp[node][1] += dp[next][0];
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int N;
	cin >> N;

	for (int n = 1; n <= N; n++)
		cin >> cnt[n];

	for (int n = 0; n < N - 1; n++) {
		int a, b;
		cin >> a >> b;

		v[a].push_back(b);
		v[b].push_back(a);
	}

	DFS(1);

	int answer = max(dp[1][0], dp[1][1]);

	cout << answer << "\n";

	return 0;
}
