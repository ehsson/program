#include <iostream>
#include <cstring>
#include <vector>
using namespace std;

vector<int> v[1001];
bool chk[1001];
int arr[1001];

bool DFS(int node)
{
	for (int i = 0; i < v[node].size(); i++) {
		int vtx = v[node][i];

		if (chk[vtx])
			continue;

		chk[vtx] = true;

		if (!arr[vtx] || DFS(arr[vtx])) {
			arr[vtx] = node;
			return true;
		}
	}

	return false;
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int T;
	cin >> T;

	for (int t = 0; t < T; t++) {
		memset(arr, 0, sizeof(arr));
		int N, M;
		cin >> N >> M;

		for (int m = 1; m <= M; m++) {
			int a, b;
			cin >> a >> b;

			for (int i = a; i <= b; i++)
				v[m].push_back(i);
		}

		int cnt = 0;

		for (int m = 1; m <= M; m++) {
			memset(chk, false, sizeof(chk));
			if (DFS(m))
				cnt++;
		}

		cout << cnt << "\n";

		for (int m = 1; m <= M; m++)
			v[m].clear();
	}

	return 0;
}
