#include <iostream>
#include <string>
using namespace std;

int N, K;
string num[16];
int cache[51];
int cache_str[16];
long long dp[32768][100];

long long GCD(long long a, long long b)
{
	long long big = max(a, b);
	long long small = min(a, b);

	while (small != 0) {
		long long rem = big % small;
		big = small;
		small = rem;
	}

	return big;
}

int get_div(string s)
{
	int div = 0;

	for (int i = 0; i < s.length(); i++) {
		div *= 10;
		div += s[i] - '0';
		div %= K;
	}

	return div;
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N;

	for (int n = 1; n <= N; n++) // 0000001, 0000010, 0000100, 0001000 ... 순으로
		cin >> num[n];

	cin >> K;

	dp[0][0] = 1;

	for (int i = 1; i <= N; i++)
		cache_str[i] = get_div(num[i]);

	cache[0] = 1 % K;
	for (int i = 1; i <= 50; i++)
		cache[i] = (cache[i - 1] * 10) % K;

	for (int cur = 0; cur < (1 << N); cur++) {
		for (int i = 0; i < N; i++) {
			if ((cur & (1 << i)) == 0) {
				int next = cur | (1 << i);

				for (int j = 0; j < K; j++) {
					int next_k = ((j * cache[num[i + 1].length()]) % K + cache_str[i + 1]) % K;

					dp[next][next_k] += dp[cur][j];
				}
			}
		}
	}

	long long val = dp[(1 << N) - 1][0];

	long long fac = 1;

	for (int i = 1; i <= N; i++)
		fac *= i;

	long long gcd = GCD(val, fac);

	cout << (long long)(val / gcd) << "/" << (long long)(fac / gcd) << "\n";

	return 0;
}
