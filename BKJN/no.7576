#include <iostream>
#include <queue>
using namespace std;

int arr[1000][1000];
int dy[4] = {0, 1, 0, -1};
int dx[4] = {1, 0, -1, 0};
int N, M;

typedef struct point {
	int y, x;
} Point;

queue<Point> q;

bool IsInside(int y, int x)
{
	if (y >= 0 && y < N && x >= 0 && x < M)
		return true;
	else
		return false;	
}

void BFS()
{
	while (!q.empty()) {
		int y = q.front().y;
		int x = q.front().x;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (IsInside(ny, nx) == true && arr[ny][nx] == 0) {
				arr[ny][nx] = arr[y][x] + 1;
				q.push({ ny, nx });
			}
		}
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> M >> N;
	for (int n = 0; n < N; n++) {
		for (int m = 0; m < M; m++) {
			cin >> arr[n][m];

			if (arr[n][m] == 1)
				q.push({n, m});
		}
	}

	BFS();

	int answer = arr[0][0];

	for (int n = 0; n < N; n++) {
		for (int m = 0; m < M; m++) {
			if (!arr[n][m]) {
				cout << "-1\n";
				return 0;
			}

			answer = max(answer, arr[n][m]);
		}
	}

	cout << answer - 1 << "\n";

	return 0;
}
