#include <iostream>
#include <string>
#include <queue>
using namespace std;

int graph[100][100];
int cnt[100][100];
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };

int N, M;

void BFS()
{
	queue<pair<int, int>> q;
	q.push(make_pair(0, 0));
	cnt[0][0] = 0;

	while (!q.empty()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny < 0 || ny > N || nx < 0 || nx > M)
				continue;

			if (graph[ny][nx]) {
				if (cnt[ny][nx] > cnt[y][x] + 1) {
					cnt[ny][nx] = cnt[y][x] + 1;
					q.push(make_pair(ny, nx));
				}
			}
			else {
				if (cnt[ny][nx] > cnt[y][x]) {
					cnt[ny][nx] = cnt[y][x];
					q.push(make_pair(ny, nx));
				}
			}
		}
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> M >> N;

	for (int n = 0; n < N; n++) {
		string s;
		cin >> s;

		for (int m = 0; m < s.length(); m++) {
			graph[n][m] = s[m] - '0';
			cnt[n][m] = N * M;
		}
	}

	BFS();

	cout << cnt[N - 1][M - 1] << "\n";

	return 0;
}
