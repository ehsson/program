#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
using namespace std;

int map[101][101];
bool visit[101][101];
int dy[4] = { 1, 0, -1, 0 };
int dx[4] = { 0, 1, 0, -1 };

int R, C, N;

bool isin(int y, int x)
{
    if (y >= 1 && y <= R && x >= 1 && x <= C)
        return true;
    else
        return false;
}

void BFS(int y, int x)
{
    queue<pair<int, int>> q;
    visit[y][x] = true;
    q.push({ y, x });

    while (!q.empty()) {
        int cy = q.front().first;
        int cx = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i++) {
            int ny = cy + dy[i];
            int nx = cx + dx[i];

            if (isin(ny, nx) && map[ny][nx] && !visit[ny][nx]) {
                visit[ny][nx] = true;
                q.push({ ny, nx });
            }
        }
    }
}

int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> R >> C;

    for (int i = R; i >= 1; i--) { // map에서 0이면 .  1이면 x
        string s;
        cin >> s;

        for (int j = 1; j <= C; j++)
            if (s[j - 1] == 'x')
                map[i][j] = 1;
            else if (s[j - 1] == '.')
                map[i][j] = 0;
    }

    cin >> N;

    for (int i = 0; i < N; i++) {
        int row;
        cin >> row;

        if (i & 1) {  // i가 홀수이면(오른쪽에서 던짐)
            for(int j = C; j >= 1; j--)
                if (map[row][j]) {
                    map[row][j] = 0;
                    break;
                }
        }
        else {  // i가 짝수이면(왼쪽에서 던짐)
            for (int j = 1; j <= C; j++)
                if (map[row][j]) {
                    map[row][j] = 0;
                    break;
                }
        }

        memset(visit, 0, sizeof(visit));
        for (int k = 1; k <= C; k++) {  // 바닥을 훑으며 바닥에 붙지 않은 미네랄 확인
            if (map[1][k] && !visit[1][k])
                BFS(1, k);
        }

        int temp = R;
        vector<pair<int, int>> v;
        for (int y = 2; y <= R; y++) {
            for (int x = 1; x <= C; x++) {
                if (map[y][x] && !visit[y][x]) {    // 바닥을 훑을 때 탐색 되지 않은 미네랄 확인
                    v.push_back({ y, x });
                    for (int j = y - 1; j >= 0; j--)
                        if (j == 0 || (map[j][x] && visit[j][x])) {
                            temp = min(temp, y - j);
                            break;
                        }
                }
            }
        }

        if (temp == R) {
            v.clear();
            continue;
        }

        temp -= 1;

        sort(v.begin(), v.end());

        for (int j = 0; j < v.size(); j++) {
            int y = v[j].first;
            int x = v[j].second;

            map[y][x] = 0;
            map[y - temp][x] = 1;
        }

        v.clear();
    }

    for (int r = R; r >= 1; r--) {
        for (int c = 1; c <= C; c++)
            if (map[r][c])
                cout << "x";
            else
                cout << ".";

        cout << "\n";
    }

    return 0;
}
