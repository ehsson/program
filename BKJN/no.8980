// incomplete code

#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;

int N, C, M;

priority_queue < pair<int, int>> pq[2001];	// {end, box}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> C;

	cin >> M;

	for (int m = 0; m < M; m++) {
		int start, end, box;
		cin >> start >> end >> box;

		pq[start].push({ -end, box });
	}

	int cnt = 0, total = 0, out_idx = 0, in_idx = 0;
	pair<int, int> truck[10000];

	for (int i = 1; i <= N; i++) {
		while (truck[out_idx].first == -i) {
			cnt += truck[out_idx].second;
			total -= truck[out_idx].second;
			out_idx++;
		}

		while (pq[i].size() > 0) {
			int dest = -pq[i].top().first;
			int box = pq[i].top().second;
			pq[i].pop();

			if (total + box <= C) {
				in_idx++;
				truck[in_idx] = { dest, box };
				total += box;
			}
			else {
				if (dest < truck[in_idx].first) {

				}
				else {
					if (total < C) {
						in_idx++;
						truck[in_idx] = { dest, C - total };
					}
				}
			}

			in_idx++;
		}
	}

	cout << cnt << "\n";

	return 0;
}
