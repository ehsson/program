#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

#define MAX 50000000

vector<pair<int, int>> v[500];
vector<pair<int, int>> back[500];
int dist[500];
bool visit[500][500];

void dijkstra(int start, int end)
{
	priority_queue<pair<int, int>> pq;
	pq.push({ 0, start });

	while (!pq.empty()) {
		int cur_dist = -pq.top().first;
		int cur = pq.top().second;
		pq.pop();

		for (int i = 0; i < v[cur].size(); i++) {
			int next = v[cur][i].first;
			int next_dist = v[cur][i].second;
			if (next_dist == -1)
				continue;

			if (dist[next] > cur_dist + next_dist) {
				pq.push({ -(cur_dist + next_dist), next });
				back[next].clear();
				back[next].push_back({ cur, i });
				dist[next] = cur_dist + next_dist;
			}
			else if (dist[next] == cur_dist + next_dist)
				back[next].push_back({ cur, i });
		}
	}
}

void BFS(int start, int end)
{
	queue<int> q;
	q.push(start);
	memset(visit, false, sizeof(visit));

	while (!q.empty()) {
		int parent = q.front();
		q.pop();

		for (int i = 0; i < back[parent].size(); i++) {
			int child = back[parent][i].first;
			int idx = back[parent][i].second;

			if (!visit[child][parent]) {
				q.push(child);
				v[child][idx].second = -1;
				visit[child][parent] = true;
			}
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	while (true) {
		int N, M;
		cin >> N >> M;

		if (N == 0 && M == 0)
			break;

		for (int n = 0; n < N; n++) {
			dist[n] = MAX;
			v[n].clear();
			back[n].clear();
		}

		int S, D;
		cin >> S >> D;

		dist[S] = 0;

		for (int m = 0; m < M; m++) {
			int U, V, P;
			cin >> U >> V >> P;

			v[U].push_back({ V, P });
		}

		dijkstra(S, D);
		BFS(D, S);

		for (int n = 0; n < N; n++)
			dist[n] = MAX;

		dist[S] = 0;

		dijkstra(S, D);

		if (dist[D] == MAX)
			cout << "-1\n";
		else
			cout << dist[D] << "\n";
	}

	return 0;
}
