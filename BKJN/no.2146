#include <iostream>
#include <queue>
#include <cstring>
using namespace std;

int N;
int minimum = 10001;
int map[100][100];
bool visit[100][100];
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };

void getIslandNum(int sy, int sx, int num)
{
	queue<pair<int, int>> q;
	q.push({ sy, sx });
	map[sy][sx] = num;

	while (!q.empty()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny >= 0 && ny < N && nx >= 0 && nx < N && map[ny][nx] == -1) {
				q.push({ ny, nx });
				map[ny][nx] = num;
			}
		}
	}
}

void BFS(int sy, int sx)
{
	queue<pair<pair<int, int>, int>> q;
	q.push({ {sy, sx}, 0 });
	visit[sy][sx] = true;

	while (!q.empty()) {
		int y = q.front().first.first;
		int x = q.front().first.second;
		int len = q.front().second;
		q.pop();

		if (map[y][x] > 0 && (y != sy || x  != sx)) {
			minimum = min(minimum, len);
			continue;
		}

		if (minimum <= len)
			continue;

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny >= 0 && ny < N && nx >= 0 && nx < N) {
				if (!visit[ny][nx] && map[ny][nx] != map[sy][sx]) {
					q.push({ {ny, nx}, len + 1 });
					visit[ny][nx] = true;
				}
			}
		}
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N;

	for (int y = 0; y < N; y++)
		for (int x = 0; x < N; x++) {
			cin >> map[y][x];

			if (map[y][x])
				map[y][x] = -1;
		}

	int num = 0;

	for (int y = 0; y < N; y++)
		for (int x = 0; x < N; x++)
			if (map[y][x] == -1) {
				num++;
				getIslandNum(y, x, num);
			}

	for (int y = 0; y < N; y++)
		for (int x = 0; x < N; x++)
			if (map[y][x] > 0) {
				memset(visit, false, sizeof(visit));
				BFS(y, x);
			}
				
	cout << minimum - 1 << "\n";

	return 0;
}
