#include <iostream>
#include <cstring>
using namespace std;

int N, M;

int map[50][50];
int map_arr[50 * 50];
int answer[4];

bool isin(int y, int x)
{
	if (y >= 1 && y <= N && x >= 1 && x <= N)
		return true;
	else
		return false;
}

void make_arr(void)
{
	bool visit[50][50] = { false };
	int direction = 0;	// 0: 우, 1: 하, 2: 좌, 3: 상
	int y = 1, x = 1;

	for (int i = N * N - 1; i >= 0; i--) {
		map_arr[i] = map[y][x];
		visit[y][x] = true;

		switch (direction) {
		case 0:
			if (isin(y, x + 1) && !visit[y][x + 1])
				x++;
			else if (isin(y + 1, x) && !visit[y + 1][x]) {
				direction = 1;
				y++;
			}
			break;
		case 1:
			if (isin(y + 1, x) && !visit[y + 1][x])
				y++;
			else if (isin(y, x - 1) && !visit[y][x - 1]) {
				direction = 2;
				x--;
			}
			break;
		case 2:
			if (isin(y, x - 1) && !visit[y][x - 1])
				x--;
			else if (isin(y - 1, x) && !visit[y - 1][x]) {
				direction = 3;
				y--;
			}
			break;
		case 3:
			if (isin(y - 1, x) && !visit[y - 1][x])
				y--;
			else if (isin(y, x + 1) && !visit[y][x + 1]) {
				direction = 0;
				x++;
			}
			break;
		default:
			break;
		}
	}
}

void moving_bead(int temp_arr[])
{
	memset(map_arr, 0, sizeof(map_arr));
	int idx = 1;

	for (int i = 1; i < N * N; i++) {
		if (temp_arr[i]) {
			map_arr[idx] = temp_arr[i];
			idx++;
		}
	}
}

void magic(int d, int s)
{
	int temp_arr[50 * 50] = { 0 };
	for (int i = 0; i < N * N; i++)
		temp_arr[i] = map_arr[i];

	// 마법으로 구슬 없애기
	switch (d) {
	case 1:	// 상
		for (int i = 1; i <= s; i++) {
			int idx = (2 * i + 1) * (2 * i + 1) - (i + 1);
			temp_arr[idx] = 0;
		}
		break;
	case 2:	// 하
		for (int i = 1; i <= s; i++) {
			int idx = 4 * i * i - i;
			temp_arr[idx] = 0;
		}
		break;
	case 3:	// 좌
		for (int i = 1; i <= s; i++) {
			int idx = (2 * i - 1) * (2 * i - 1) + (i - 1);
			temp_arr[idx] = 0;
		}
		break;
	case 4:	// 우
		for (int i = 1; i <= s; i++) {
			int idx = 4 * i * i + i;
			temp_arr[idx] = 0;
		}
		break;
	default:
		break;
	}

	// 빈 칸 채우기
	moving_bead(temp_arr);
}

void explosion()
{
	while (true) {
		int temp_arr[50 * 50] = { 0 };
		int prev_num = 0, cnt = 1;
		bool chk = false;

		for (int i = 1; i <= N * N; i++) {
			if (prev_num == 0 && cnt >= 2)
				break;

			if (prev_num != map_arr[i]) {
				if (cnt > 3) {
					answer[prev_num] += cnt;
					chk = true;
					for (int j = 1; j <= cnt; j++)
						temp_arr[i - j] = 0;
				}
				else
					for (int j = 1; j <= cnt; j++)
						temp_arr[i - j] = prev_num;

				prev_num = map_arr[i];
				cnt = 1;
			}
			else
				cnt++;
		}

		moving_bead(temp_arr);
		
		if (!chk)
			break;
	}
}

void grouping()
{
	int temp_arr[50 * 50] = { 0 };
	for (int i = 0; i < N * N; i++)
		temp_arr[i] = map_arr[i];
	memset(map_arr, 0, sizeof(map_arr));

	int idx = 1;
	int prev_num = temp_arr[1], cnt = 1;
	for (int i = 2; i <= N * N; i++) {
		if (prev_num == 0 && cnt >= 2)
			break;

		if (prev_num != temp_arr[i]) {
			map_arr[idx++] = cnt;
			map_arr[idx++] = prev_num;
			prev_num = temp_arr[i];
			cnt = 1;
		}
		else
			cnt++;
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;

	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++)
			cin >> map[i][j];

	make_arr();

	for (int m = 0; m < M; m++) {
		int d, s;
		cin >> d >> s;

		magic(d, s);	// 블리자드 마법
		
		explosion();	// 4개 이상 연속하는 구슬 폭발

		grouping();		// 구슬 그룹 지어 재배열
		m = m;
	}

	cout << answer[1] + 2 * answer[2] + 3 * answer[3] << "\n";

	return 0;
}
