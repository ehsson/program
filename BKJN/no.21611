// incomplete code

#include <iostream>
#include <cstring>
#include <vector>
using namespace std;

int N, M;

int map[50][50];
int map_arr[50 * 50];

bool isin(int y, int x)
{
	if (y >= 1 && y <= N && x >= 1 && x <= N)
		return true;
	else
		return false;
}

void make_arr(void)
{
	bool visit[50][50] = { false };
	int direction = 0;	// 0: 우, 1: 하, 2: 좌, 3: 상
	int y = 1, x = 1;

	for (int i = N * N - 1; i >= 0; i--) {
		map_arr[i] = map[y][x];
		visit[y][x] = true;

		switch (direction) {
		case 0:
			if (isin(y, x + 1) && !visit[y][x + 1])
				x++;
			else if (isin(y + 1, x) && !visit[y + 1][x]) {
				direction = 1;
				y++;
			}
			break;
		case 1:
			if (isin(y + 1, x) && !visit[y + 1][x])
				y++;
			else if (isin(y, x - 1) && !visit[y][x - 1]) {
				direction = 2;
				x--;
			}
			break;
		case 2:
			if (isin(y, x - 1) && !visit[y][x - 1])
				x--;
			else if (isin(y - 1, x) && !visit[y - 1][x]) {
				direction = 3;
				y--;
			}
			break;
		case 3:
			if (isin(y - 1, x) && !visit[y - 1][x])
				y--;
			else if (isin(y, x + 1) && !visit[y][x + 1]) {
				direction = 0;
				x++;
			}
			break;
		default:
			break;
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;

	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++)
			cin >> map[i][j];

	make_arr();

	for (int m = 0; m < M; m++) {
		int d, s;
		cin >> d >> s;

		switch (d) {
		case 1:	// 상
			break;
		case 2:	// 하
			break;
		case 3:	// 좌
			break;
		case 4:	// 우
			break;
		default:
			break;
		}
	}

	return 0;
}
