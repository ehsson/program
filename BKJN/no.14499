#include <iostream>
using namespace std;

#define swap(a, b) a ^= b ^= a ^= b

enum {
	R = 1, L, U, D
};

int map[20][20];
int dice[4][3];
int input[1000];
int N, M, x, y, K;

bool IsInside(int x, int y)
{
	if (x >= 0 && x < N && y >= 0 && y < M)
		return true;
	else
		return false;
}

void simulation()
{
	int k = 0, temp;
	bool chk = true;

	while (k < K) {
		switch (input[k]) {
		case R:
			if (IsInside(x, y + 1)) {
				y++;
				temp = dice[1][1];
				swap(dice[1][1], dice[1][2]);
				swap(dice[1][2], dice[3][1]);
				swap(dice[3][1], dice[1][0]);
				dice[1][0] = temp;
				chk = true;
			}
			else
				chk = false;
			break;
		case L:
			if (IsInside(x, y - 1)) {
				y--;
				temp = dice[1][1];
				swap(dice[1][1], dice[1][0]);
				swap(dice[1][0], dice[3][1]);
				swap(dice[3][1], dice[1][2]);
				dice[1][2] = temp;
				chk = true;
			}
			else
				chk = false;
			break;
		case U:
			if (IsInside(x - 1, y)) {
				x--;
				temp = dice[1][1];
				swap(dice[1][1], dice[0][1]);
				swap(dice[0][1], dice[3][1]);
				swap(dice[3][1], dice[2][1]);
				dice[2][1] = temp;
				chk = true;
			}
			else
				chk = false;
			break;
		case D:
			if (IsInside(x + 1, y)) {
				x++;
				temp = dice[1][1];
				swap(dice[1][1], dice[2][1]);
				swap(dice[2][1], dice[3][1]);
				swap(dice[3][1], dice[0][1]);
				dice[0][1] = temp;
				chk = true;
			}
			else
				chk = false;
			break;
		}

		if (map[x][y] == 0 && chk)
			map[x][y] = dice[1][1];
		else if(map[x][y] != 0 && chk) {
			dice[1][1] = map[x][y];
			map[x][y] = 0;
		}

		if(chk)
			cout << dice[3][1] << "\n";

		k++;
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N >> M >> x >> y >> K;

	for (int n = 0; n < N; n++)
		for (int m = 0; m < M; m++)
			cin >> map[n][m];

	for (int k = 0; k < K; k++)
		cin >> input[k];

	simulation();

	return 0;
}
