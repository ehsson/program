#include <iostream>
#include <queue>
#include <vector>
using namespace std;

#define MAX 2147483647

int N, M;

int fox[4001];
int wolf[4001][2];
vector<pair<int, int>> map[4001];	//(location, dis)

void wBFS()
{
	priority_queue<pair<int, pair<int, int>>> pq;	//(time, (location, chk))
	pq.push({ 0, {1, 0} });

	while (!pq.empty()) {
		int time = -pq.top().first;
		int cur = pq.top().second.first;
		int chk = pq.top().second.second;
		pq.pop();

		if (wolf[cur][chk] < time)
			continue;

		for (int i = 0; i < map[cur].size(); i++) {
			int next = map[cur][i].first;
			int dis = map[cur][i].second;

			if (chk) {	// 두배 속도로 달려왔음
				if (wolf[next][0] > time + (dis * 2)) {
					wolf[next][0] = time + (dis * 2);
					pq.push({ -wolf[next][0], {next, 0} });
				}
			}
			else {	// 체력 회복 함
				if (wolf[next][1] > time + (dis / 2)) {
					wolf[next][1] = time + (dis / 2);
					pq.push({ -wolf[next][1], {next, 1} });
				}
			}
		}
	}
}

void fBFS()
{
	priority_queue<pair<int, int>> pq;	//(time, location)
	pq.push({ 0, 1 });

	while (!pq.empty()) {
		int time = -pq.top().first;
		int cur = pq.top().second;
		pq.pop();

		for (int i = 0; i < map[cur].size(); i++) {
			int next = map[cur][i].first;
			int dis = map[cur][i].second;

			if (fox[next] > fox[cur] + dis) {
				fox[next] = fox[cur] + dis;
				pq.push({ -fox[next], next });
			}
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> M;

	for (int m = 0; m < M; m++) {
		int a, b, d;
		cin >> a >> b >> d;

		map[a].push_back({ b, d * 2 });
		map[b].push_back({ a, d * 2 });
	}

	wolf[1][1] = MAX;
	for (int i = 2; i <= N; i++)
		fox[i] = wolf[i][0] = wolf[i][1] = MAX;

	wBFS();
	fBFS();

	int answer = 0;

	for (int i = 2; i <= N; i++)
		if (fox[i] < min(wolf[i][0], wolf[i][1]))
			answer++;

	cout << answer << "\n";

	return 0;
}
