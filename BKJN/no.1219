#include <iostream>
#include <vector>
#include <queue>
using namespace std;

#define INF 9223372036854775807

int money[50];
long long bf[50];
bool visit[50];

int N, start, ende, M;

vector<pair<pair<int, int>, int>> v;
queue<int> q;

bool BFS()
{
	while (!q.empty()) {
		int cur = q.front();
		q.pop();

		for (int i = 0; i < v.size(); i++) {
			if (v[i].first.first == cur) {
				int next = v[i].first.second;

				if (visit[next])
					continue;
				visit[next] = true;
				q.push(next);
			}
		}
	}

	if (visit[ende])
		return true;
	else
		return false;
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> start >> ende >> M;

	for (int m = 0; m < M; m++) {
		int s, e, cost;
		cin >> s >> e >> cost;

		v.push_back({ { s, e }, cost });
	}

	for (int n = 0; n < N; n++) {
		cin >> money[n];
		bf[n] = -INF;
	}

	bf[start] = money[start];

	for (int i = 0; i < N - 1; i++) {
		for (int j = 0; j < v.size(); j++) {
			int from = v[j].first.first;
			int to = v[j].first.second;
			int cost = v[j].second;

			if (bf[from] != -INF && bf[to] < bf[from] - cost + money[to])
				bf[to] = bf[from] - cost + money[to];
		}
	}

	for (int j = 0; j < v.size(); j++) {
		int from = v[j].first.first;
		int to = v[j].first.second;
		int cost = v[j].second;

		if (bf[from] != -INF && bf[to] < bf[from] - cost + money[to]) {
			q.push(from);
		}
	}

	if (bf[ende] == -INF)
		cout << "gg\n";
	else {
		if (BFS())
			cout << "Gee\n";
		else
			cout << bf[ende] << "\n";
	}

	return 0;
}
