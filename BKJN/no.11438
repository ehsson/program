#include <iostream>
#include <vector>
using namespace std;

int depth[100001];
int parent[100001][20];
vector<int> v[100001];

void Make_Tree(int node)
{
	for (int i = 0; i < v[node].size(); i++) {
		int next = v[node][i];

		if (depth[next] == 0) {
			depth[next] = depth[node] + 1;
			parent[next][0] = node;
			Make_Tree(next);
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int N;
	cin >> N;

	for (int n = 1; n < N; n++) {
		int a, b;
		cin >> a >> b;

		v[a].push_back(b);
		v[b].push_back(a);
	}

	depth[1] = 1;
	Make_Tree(1);

	for (int i = 0; i < 19; i++)
		for (int n = 1; n <= N; n++)
			parent[n][i + 1] = parent[parent[n][i]][i];

	int M;
	cin >> M;

	for (int m = 0; m < M; m++) {
		int a, b;
		cin >> a >> b;

		if (depth[a] < depth[b])
			swap(a, b);				// a의 깊이가 더 깊고 b의 깊이가 얕다.

		while (depth[a] != depth[b]) {
			int temp = a;
			int i = 0;

			while (true) {
				temp = parent[a][i];

				if (depth[temp] <= depth[b]) {
					if (depth[temp] == depth[b])
						a = parent[a][i];
					else
						a = parent[a][i - 1];

					break;
				}

				i++;
			}
		}

		if (a != b) {
			for (int i = 19; i >= 0; i--) {
				if (parent[a][i] != parent[b][i]) {
					a = parent[a][i];
					b = parent[b][i];
				}
			}

			a = parent[a][0];
		}

		cout << a << "\n";
	}

	return 0;
}
