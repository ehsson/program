#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

typedef struct direction{
	int y, x;
} Direction;

int map[5][5];
int visit[5][5];
vector<int> v[5][5];
vector<int> temp[5][5];
int shark_route[3];
int temp_route[3];

// 상어의 방향
Direction s_dir[4] = { { -1, 0 },			// 상
					   { 0, -1 },			// 좌
					   { 1, 0 },			// 하
					   { 0, 1 } };			// 우

// 물고기 방향
Direction f_dir[9] = { {0, 0}, 
					   {0, -1},
					   {-1, -1},
					   {-1, 0},
					   {-1, 1},
					   {0, 1},
					   {1, 1},
					   {1, 0},
					   {1, -1} };

int sy, sx;
int max_cnt;

bool isin(int y, int x)
{
	if (y >= 1 && y <= 4 && x >= 1 && x <= 4)
		return true;
	else
		return false;
}

void find_shark_route(int depth, int cnt, int y, int x)
{
	if (depth == 3) {
		if (cnt > max_cnt) {
			max_cnt = cnt;

			for (int i = 0; i < 3; i++)
				shark_route[i] = temp_route[i];
		}

		return;
	}

	for (int i = 0; i < 4; i++) {
		int ny = y + s_dir[i].y;
		int nx = x + s_dir[i].x;

		if (isin(ny, nx)) {
			int temp_cnt = temp[ny][nx].size();
			if (visit[ny][nx] > 0)
				temp_cnt = 0;
			temp_route[depth] = i;
			visit[ny][nx]++;
			find_shark_route(depth + 1, cnt + temp_cnt, ny, nx);
			temp_route[depth] = 0;
			visit[ny][nx]--;
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int M, S;
	cin >> M >> S;

	for (int m = 0; m < M; m++) {
		int y, x, d;
		cin >> y >> x >> d;

		v[y][x].push_back(d);
	}

	cin >> sy >> sx;

	for (int s = 0; s < S; s++) {	// S번 이동
		// 물고기 한 칸씩 이동
		for (int y = 1; y <= 4; y++)
			for (int x = 1; x <= 4; x++)
				for (int i = 0; i < v[y][x].size(); i++) {
					bool chk = false;	// 이동이 된 물고기인지 체크

					for (int j = v[y][x][i]; j > v[y][x][i] - 8; j--) {
						int dir_idx = j;
						if (dir_idx < 1)
							dir_idx = dir_idx + 8;
						int ny = y + f_dir[dir_idx].y;
						int nx = x + f_dir[dir_idx].x;
						if (isin(ny, nx) && !map[ny][nx] && !(ny == sy && nx == sx)) {
							temp[ny][nx].push_back(dir_idx);
							chk = true;
							break;
						}
					}

					if (!chk)
						temp[y][x].push_back(v[y][x][i]);
				}

		// 상어 3칸 이동
		max_cnt = -1;
		find_shark_route(0, 0, sy, sx);

		for (int i = 0; i < 3; i++) {
			sy = sy + s_dir[shark_route[i]].y;
			sx = sx + s_dir[shark_route[i]].x;
			
			if (temp[sy][sx].size() > 0)
				map[sy][sx] = 3;
			temp[sy][sx].clear();
		}

		// 물고기 냄새 하나씩 줄이기
		for (int y = 1; y <= 4; y++)
			for (int x = 1; x <= 4; x++)
				if (map[y][x] > 0)
					map[y][x]--;

		// 이동이 끝난 후 물고기 복제
		for (int y = 1; y <= 4; y++)
			for (int x = 1; x <= 4; x++) {
				for (int i = 0; i < temp[y][x].size(); i++)
					v[y][x].push_back(temp[y][x][i]);
				temp[y][x].clear();
			}
	}

	int answer = 0;
	for (int y = 1; y <= 4; y++)
		for (int x = 1; x <= 4; x++)
			answer += v[y][x].size();

	cout << answer << "\n";

	return 0;
}
