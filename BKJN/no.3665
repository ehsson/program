#include <iostream>
#include <vector>
#include <cstring>
#include <queue>
using namespace std;

int order[501];
int chk[501];
bool mat[501][501];

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int T;
	cin >> T;

	for (int tc = 0; tc < T; tc++) {
		memset(mat, false, sizeof(mat));
		memset(chk, 0, sizeof(chk));
		memset(order, 0, sizeof(order));
		int N;
		cin >> N;

		for (int n = 1; n <= N; n++)
			cin >> order[n];

		for(int i = 1; i < N; i++)
			for (int j = i + 1; j <= N; j++) {
				mat[order[i]][order[j]] = true;
				chk[order[j]]++;
			}

		int M;
		cin >> M;

		for (int m = 0; m < M; m++) {
			int a, b;
			cin >> a >> b;

			if (mat[b][a]) {
				mat[b][a] = false;
				mat[a][b] = true;
				chk[a]--;
				chk[b]++;
			}
			else {
				mat[b][a] = true;
				mat[a][b] = false;
				chk[a]++;
				chk[b]--;
			}
		}

		queue<int> q;
		vector<int> answer;
		bool flag = true;

		for (int n = 1; n <= N; n++)
			if (!chk[n])
				q.push(n);

		while (!q.empty()) {
			if (q.size() > 1) {
				flag = false;
				break;
			}

			int cur = q.front();
			q.pop();

			answer.push_back(cur);

			for (int n = 1; n <= N; n++) {
				if (mat[cur][n]) {
					chk[n]--;

					if (!chk[n])
						q.push(n);
				}
			}
		}

		if (!flag)
			cout << "?\n";
		else if (answer.size() == N) {
			for (int i = 0; i < N; i++)
				cout << answer[i] << " ";
			cout << "\n";
		}
		else
			cout << "IMPOSSIBLE\n";
	}

	return 0;
}
