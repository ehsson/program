#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
using namespace std;

int map[20][20];
int visit[20][20];
int dy[4] = { -1, 0, 0, 1 };
int dx[4] = { 0, -1, 1, 0 };

int N;

bool IsInside(int y, int x)
{
	if (y >= 0 && y < N && x >= 0 && x < N)
		return true;
	else
		return false;
}

int BFS(int start_y, int start_x)
{
	queue<pair<int, int>> q;
	q.push(make_pair(start_y, start_x));
	visit[start_y][start_x] = 1;
	map[start_y][start_x] = 0;
	int shark_size = 2, time = 0, eat_cnt = 0;

	while (!q.empty()) {
		vector<pair<int, int>> v;
		int qSize = q.size();

		while (qSize) {
			qSize--;

			int y = q.front().first;
			int x = q.front().second;
			q.pop();

			for (int i = 0; i < 4; i++) {
				int ny = y + dy[i];
				int nx = x + dx[i];

				if (IsInside(ny, nx) && visit[ny][nx] == 0) {
					if (map[ny][nx] == 0 || map[ny][nx] == shark_size) {
						visit[ny][nx] = visit[y][x] + 1;
						q.push(make_pair(ny, nx));
					}
					else if (map[ny][nx] != 0 && map[ny][nx] < shark_size) {
						visit[ny][nx] = visit[y][x] + 1;
						v.push_back(make_pair(ny, nx));
					}
				}
			}
		}

		if (v.size()) {
			sort(v.begin(), v.end());
			eat_cnt++;

			if (eat_cnt == shark_size) {
				eat_cnt = 0;
				shark_size++;
			}

			time += (visit[v[0].first][v[0].second] - 1);
			memset(visit, 0, sizeof(visit));
			visit[v[0].first][v[0].second] = 1;
			map[v[0].first][v[0].second] = 0;

			while (!q.empty())
				q.pop();

			q.push(make_pair(v[0].first, v[0].second));
		}
	}

	return time;
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N;

	int shark_y, shark_x;

	for (int y = 0; y < N; y++)
		for (int x = 0; x < N; x++) {
			cin >> map[y][x];

			if (map[y][x] == 9) {
				shark_y = y;
				shark_x = x;
			}
		}

	cout << BFS(shark_y, shark_x) << "\n";

	return 0;
}
