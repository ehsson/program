#include <iostream>
#include <string>
#include <queue>
using namespace std;

int N, M;
char map[50][50];
bool visit[64][50][50];
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };

int BFS(int sy, int sx)
{
	queue<pair<pair<pair<int, int>, int>, int>> q;
	q.push({ { {sy, sx}, 0 }, 0 }); // y, x, cnt, bit
	map[sy][sx] = '.';
	visit[0][sy][sx] = true;

	while (!q.empty()) {
		int y = q.front().first.first.first;
		int x = q.front().first.first.second;
		int cnt = q.front().first.second;
		int bit = q.front().second;
		q.pop();

		if (map[y][x] == '1')
			return cnt;

		if (map[y][x] >= 'a') {
			int temp = 1 << (map[y][x] - 'a');
			bit = bit | temp;
			visit[bit][y][x] = true;
		}
		else if (map[y][x] >= 'A') {
			int temp = 1 << (map[y][x] - 'A');

			if (!(bit & temp))
				continue;
		}

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny >= 0 && ny < N && nx >= 0 && nx < M && 
				 map[ny][nx] != '#' && !visit[bit][ny][nx]) {
				visit[bit][ny][nx] = true;
				q.push({ {{ny, nx}, cnt + 1}, bit });
			}
		}
	}

	return -1;
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> M;

	int sy = 0, sx = 0;

	for (int n = 0; n < N; n++) {
		string s;
		cin >> s;

		for (int m = 0; m < M; m++) {
			map[n][m] = s[m];
			if (map[n][m] == '0') {
				sy = n;
				sx = m;
			}
		}
	}

	cout << BFS(sy, sx) << "\n";

	return 0;
}
