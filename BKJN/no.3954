#include <stdio.h>
#include <string.h>

#define MAX 50000000

int arr[100000];
char oper[4096];
char input[4096];
int bracket_chk[4096];
int bracket_cnt[4096];

typedef struct Bracket
{
	int start;
	int end;
} Bracket;

Bracket bracket[2048];

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	int T, M, C, I;

	scanf_s("%d", &T);

	for (int t = 1; t <= T; t++)
	{
		scanf_s("%d %d %d", &M, &C, &I);

		memset(arr, 0, sizeof(int) * 100000);
		memset(bracket_chk, 0, sizeof(int) * 4096);
		memset(bracket_cnt, 0, sizeof(int) * 4096);

		scanf_s("%s", oper, C + 1);

		scanf_s("%s", input, I + 1);

		int r_pos = 0, l_pos;

		for (int c = 0; c < C; c++)
		{
			if (oper[c] == '[')
			{
				bracket[r_pos].start = c;
				bracket[r_pos].end = 0;
				l_pos = r_pos;
				r_pos++;
			}
			else if (oper[c] == ']')
			{
				while (1)
				{
					if (bracket[l_pos].end == 0)
						break;

					l_pos--;
				}

				bracket[l_pos].end = c;
				bracket_chk[bracket[l_pos].end] = bracket[l_pos].start;
				bracket_chk[bracket[l_pos].start] = bracket[l_pos].end;
			}
		}

		int cnt = 0, chk = 0;
		int pos = 0, op_pos = 0, input_pos = 0;

		while (cnt < MAX)
		{
			switch (oper[op_pos])
			{
				case '+':
					arr[pos] = (arr[pos] + 1) % 256;
					break;
				case '-':
					arr[pos] = (arr[pos] + 255) % 256;
					break;
				case '<':
					pos = (pos - 1 + M) % M;

					break;
				case '>':
					pos = (pos + 1 + M) % M;

					break;
				case '.':
					//printf("%c\n", arr[pos]);

					break;
				case ',':
					if (input_pos < I)
					{
						arr[pos] = (int)input[input_pos];

						input_pos++;
					}
					else if(input_pos == I)
						arr[pos] = 255;

					break;
				case '[':
					if (arr[pos] == 0)
						op_pos = bracket_chk[op_pos];

					break;
				case ']':
					if (arr[pos] != 0)
						op_pos = bracket_chk[op_pos];

					bracket_cnt[op_pos]++;

					break;
				default:
					break;
			}

			op_pos++;

			if (op_pos >= C)
			{
				chk = 1;
				break;
			}

			cnt++;
		}

		int idx = 0;

		if (chk == 0)
		{
			for (int j = C; j >= 0; j--)
			{
				if (bracket_cnt[j] != 0)
				{
					for (int k = 0; k <= r_pos; k++)
					{
						if (bracket[k].start == j)
						{
							idx = k;
							break;
						}
					}

					break;
				}
			}
		}

		if (chk == 1)
			printf("Terminates\n");
		else
			printf("Loops %d %d\n", bracket[idx].start, bracket[idx].end);
	}

	return 0;
}


// C++

#include <iostream>
#include <cstring>
using namespace std;

#define MAX 50000000

typedef struct Bracket
{
	int start;
	int end;
} Bracket;

Bracket bracket_order[4096];
int bracket_pos[4096];
int arr[100000];
char program[4096];
char input[4096];
int chk[4096];

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	int T;

	cin >> T;

	for (int t = 1; t <= T; t++)
	{
		int M, C, I;

		cin >> M >> C >> I;

		memset(arr, 0, sizeof(int) * 100000);
		memset(program, 0, sizeof(char) * 4096);
		memset(input, 0, sizeof(char) * 4096);
		memset(bracket_pos, 0, sizeof(int) * 4096);
		memset(chk, 0, sizeof(int) * 4096);

		int open = 0, close;

		for (int c = 0; c < C; c++)
		{
			cin >> program[c];

			if (program[c] == '[')
			{
				bracket_order[open].start = c;
				bracket_order[open].end = 0;
				close = open;
				open++;
			}
			else if (program[c] == ']')
			{
				while (bracket_order[close].end)
					close--;

				bracket_order[close].end = c;
			}
		}

		for (int p = 0; p < open; p++)
		{
			bracket_pos[bracket_order[p].start] = bracket_order[p].end;
			bracket_pos[bracket_order[p].end] = bracket_order[p].start;
		}

		for (int i = 0; i < I; i++)
			cin >> input[i];

		int cnt = 0, _chk = 0;
		int pro_pos = 0, point_pos = 0, input_pos = 0;

		while (cnt < MAX)
		{
			chk[pro_pos] = 1;

			switch (program[pro_pos])
			{
				case '+':
					arr[point_pos] = (arr[point_pos] + 1) % 256;
					break;
				case '-':
					arr[point_pos] = (arr[point_pos] + 255) % 256;
					break;
				case '<':
					point_pos = (point_pos - 1 + M) % M;
					break;
				case '>':
					point_pos = (point_pos + 1 + M) % M;
					break;
				case '.':
					break;
				case ',':
					if (input_pos < I)
					{
						arr[point_pos] = (int)input[input_pos];
						input_pos++;
					}
					else
						arr[point_pos] = 255;

					break;
				case '[':
					if (!arr[point_pos])
						pro_pos = bracket_pos[pro_pos];

					break;
				case ']':
					if (arr[point_pos])
						pro_pos = bracket_pos[pro_pos];

					break;
				default:
					break;
			}

			pro_pos++;
			cnt++;

			if (pro_pos >= C)
			{
				_chk = 1;
				break;
			}
		}

		if (_chk)
			cout << "Terminates\n";
		else
		{
			int _pos = 0;

			for (int i = C - 1; i >= 0; i--)
			{
				if (chk[i])
				{
					for (int j = 0; j < open; j++)
					{
						if (bracket_order[j].end == i)
						{
							_pos = i;
							break;
						}
					}

					if (_pos)
						break;
				}
			}

			cout << "Loops " << bracket_pos[_pos] << " " << _pos << "\n";
		}
	}

	return 0;
}

//test case

4
10 4 3
+-.,
qwe
1000 5 1
+[+-]
a
9999 52 14
+++++[>+++++++++<-],+[-[>--.++>+<<-]>+.->[<.>-]<<,+]
this_is_a_test
100 74 4
+++++[->++<]>[-<+++++++>]<[->+>+>+>+<<<<]>+++>--->++++++++++>---<<<.>.>.>.
xxyz
