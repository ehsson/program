#include <iostream>
#include <queue>
#include <vector>
using namespace std;

bool visit[101001];
vector<int> v[101001];

int N, K, M;
int answer = -1;

void BFS()
{
	queue<pair<int, int>> q;
	q.push({ 1, 1 });
	visit[1] = true;

	while (!q.empty()) {
		int cur = q.front().first;
		int cnt = q.front().second;
		q.pop();

		if (cur == N) {
			answer = cnt;
			return;
		}

		for (int i = 0; i < v[cur].size(); i++) {
			int next = v[cur][i];

			if (!visit[next]) {
				if (next > 100000)
					q.push({ next, cnt });
				else
					q.push({ next, cnt + 1 });

				visit[next] = true;
			}
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> K >> M;

	for (int m = 1; m <= M; m++) {
		for (int k = 0; k < K; k++) {
			int input;
			cin >> input;

			v[100000 + m].push_back(input);
			v[input].push_back(100000 + m);
		}
	}

	BFS();

	cout << answer << "\n";

	return 0;
}
