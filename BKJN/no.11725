// BFS

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<int> v[100001];
int visit[100001];
int N;

void BFS(int start)
{
	queue<int> q;
	q.push(start);
	visit[start] = 1;

	while (!q.empty()) {
		int a = q.front();
		q.pop();

		for (int i = 0; i < v[a].size(); i++) {
			int b = v[a][i];

			if (!visit[b]) {
				q.push(b);
				visit[b] = a;
			}
		}
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N;

	for (int i = 1; i < N; i++) {
		int a, b;
		cin >> a >> b;

		v[a].push_back(b);
		v[b].push_back(a);
	}

	BFS(1);

	for (int i = 2; i <= N; i++)
		cout << visit[i] << "\n";

	return 0;
}


// DFS

#include <iostream>
#include <vector>
using namespace std;

vector<int> v[100001];
int visit[100001];
int N;

void DFS(int node)
{
	for (int i = 0; i < v[node].size(); i++) {
		if (!visit[v[node][i]]) {
			visit[v[node][i]] = node;
			DFS(v[node][i]);
		}
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	cin >> N;

	for (int i = 1; i < N; i++) {
		int a, b;
		cin >> a >> b;

		v[a].push_back(b);
		v[b].push_back(a);
	}

	DFS(1);

	for (int i = 2; i <= N; i++)
		cout << visit[i] << "\n";

	return 0;
}
