// fail code

#include <iostream>
#include <queue>
#include <string>
using namespace std;

#define MAX 2000000

int map[1001][1001];
int dp[1001][1001][2];	// 0: cnt 횟수, 1: k 횟수
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };

int N, M, K;
int answer;

void BFS()
{
	queue<pair<pair<pair<int, int>, int>, int>> q;	// {{{y, x}, cnt}, k}
	q.push({ {{1, 1}, 1}, 0 });	// cnt가 홀수면 낮, 짝수면 밤
	dp[1][1][0] = 1;
	dp[1][1][1] = 0;

	while (!q.empty()) {
		int y = q.front().first.first.first;
		int x = q.front().first.first.second;
		int cnt = q.front().first.second;
		int k = q.front().second;
		q.pop();

		if (k > K)
			continue;

		if (y == N && x == M)
			answer = min(answer, cnt);

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny >= 0 && ny <= N && nx >= 0 && nx <= M) {
				if (map[ny][nx] && dp[ny][nx][0] > cnt + 1 && dp[ny][nx][1] > k + 1) {	// 다음 칸에 벽이 존재
					if (cnt % 2 == 1) {	// 낮일 때
						dp[ny][nx][0] = cnt + 1;
						dp[ny][nx][1] = k + 1;
						q.push({ {{ny, nx}, cnt + 1}, k + 1 });
					}
					else if(cnt % 2 == 0 && dp[ny][nx][0] > cnt + 2) {	// 밤일 때
						dp[ny][nx][0] = cnt + 2;
						dp[ny][nx][1] = k + 1;
						q.push({ {{ny, nx}, cnt + 2}, k + 1 });
					}
				}
				else if(!map[ny][nx] && dp[ny][nx][0] > cnt + 1 && dp[ny][nx][1] > k) {	// 다음 칸에 벽이 존재하지 않음
					dp[ny][nx][0] = cnt + 1;
					dp[ny][nx][1] = k;
					q.push({ {{ny, nx}, cnt + 1}, k });
				}
			}
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> M >> K;

	for (int n = 1; n <= N; n++) {
		string s;
		cin >> s;

		for (int m = 0; m < M; m++)
			map[n][m + 1] = s[m] - '0';
	}

	answer = MAX;

	for (int y = 1; y <= N; y++)
		for (int x = 1; x <= M; x++)
			dp[y][x][0] = dp[y][x][1] = MAX;

	BFS();

	if (answer == MAX)
		cout << "-1\n";
	else
		cout << answer << "\n";

	return 0;
}
