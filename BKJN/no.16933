#include <iostream>
#include <queue>
#include <string>
using namespace std;

#define MAX 2000000

int map[1000][1000];
bool visit[1000][1000][11];
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };

int N, M, K;
int answer;

void BFS()
{
	queue<pair<pair<pair<int, int>, int>, int>> q;	// {{{y, x}, cnt}, k}
	q.push({ {{0, 0}, 1}, 0 });	// cnt가 홀수면 낮, 짝수면 밤
	visit[0][0][0] = true;

	while (!q.empty()) {
		int y = q.front().first.first.first;
		int x = q.front().first.first.second;
		int cnt = q.front().first.second;
		int k = q.front().second;
		q.pop();

		if (y == N - 1 && x == M - 1) {
			answer = min(answer, cnt);
			return;
		}

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny >= 0 && ny < N && nx >= 0 && nx < M) {
				if (map[ny][nx]) {	// 벽 존재
					if (!visit[ny][nx][k + 1]) {
						if (cnt % 2 == 1) {	// 낮
							if (k < K) {
								visit[ny][nx][k + 1] = true;
								q.push({ {{ny, nx}, cnt + 1}, k + 1 });
							}
						}
						else  // 밤
							q.push({ {{y, x}, cnt + 1}, k });
					}
				}
				else {	// 벽 존재하지 않음
					if (!visit[ny][nx][k]) {
						visit[ny][nx][k] = true;
						q.push({ {{ny, nx}, cnt + 1}, k });
					}
				}
			}
		}
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> M >> K;

	for (int n = 0; n < N; n++) {
		string s;
		cin >> s;

		for (int m = 0; m < M; m++)
			map[n][m] = s[m] - '0';
	}

	answer = MAX;

	BFS();

	if (answer == MAX)
		cout << "-1\n";
	else
		cout << answer << "\n";

	return 0;
}
