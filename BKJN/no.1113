#include <iostream>
#include <queue>
#include <string>
#include <cstring>
using namespace std;

int N, M;

int map[52][52];
bool visit[52][52];
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };

bool isin(int y, int x)
{
	if (y >= 0 && y <= N + 1 && x >= 0 && x <= M + 1)
		return true;
	else
		return false;
}

int BFS(int sy, int sx, int depth)
{
	bool flag = true;
	int cnt = 0;
	queue<pair<int, int>> q;
	q.push({ sy, sx });
	visit[sy][sx] = true;

	while (!q.empty()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop();

		cnt++;

		if (map[y][x] == -1)
			flag = false;

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (isin(ny, nx) && !visit[ny][nx] && map[ny][nx] < depth) {
				visit[ny][nx] = true;
				q.push({ ny, nx });
			}
		}
	}

	if (flag)
		return cnt;
	else
		return 0;
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> M;

	int _max = 0;

	for (int i = 1; i <= N; i++)
		map[i][0] = map[i][M + 1] = -1;

	for (int i = 1; i <= M; i++)
		map[0][i] = map[N + 1][i] = -1;

	for (int i = 0; i < N; i++) {
		string s;
		cin >> s;

		for (int j = 0; j < M; j++) {
			map[i + 1][j + 1] = s[j] - '0';
			_max = max(_max, map[i + 1][j + 1]);
		}
	}

	int answer = 0;

	for (int i = 2; i <= _max; i++) {
		memset(visit, false, sizeof(visit));

		for(int y = 2; y <= N - 1; y++)
			for (int x = 2; x <= M - 1; x++)
				if (map[y][x] < i && !visit[y][x])
					answer += BFS(y, x, i);
	}

	cout << answer << "\n";

	return 0;
}
