#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

#define WALL 1
#define PASSENGER 2

int N, M, F;
int map[22][22];
int visit[21][21];
int dy[4] = { -1, 0, 0, 1 };
int dx[4] = { 0, -1, 1, 0 };

typedef struct Point{
	int y, x;
} Point;

Point target[21][21];

int BFS(int y, int x, int fuel)
{
	int success = 0;

	while (success < M) {
		memset(visit, 0, sizeof(visit));
		priority_queue<pair<int, pair<int, int>>> pq; // (거리, (y, x))
		queue<pair<int, int>> q;
		q.push({ y, x });
		visit[y][x] = 1;

		while (!q.empty()) {
			int cy = q.front().first;
			int cx = q.front().second;
			q.pop();

			if (map[cy][cx] == PASSENGER) // 숭객 찾음
				pq.push({ -(visit[cy][cx] - 1), {-cy, -cx} });

			for (int i = 0; i < 4; i++) {
				int ny = cy + dy[i];
				int nx = cx + dx[i];

				if (map[ny][nx] != WALL && !visit[ny][nx]) {
					visit[ny][nx] = visit[cy][cx] + 1;
					q.push({ ny, nx });
				}
			}
		}

		if (pq.empty())
			return -1;

		int sy = -pq.top().second.first;
		int sx = -pq.top().second.second;
		fuel += pq.top().first;
		q.push({ sy, sx });
		map[sy][sx] = 0;
		memset(visit, 0, sizeof(visit));
		visit[sy][sx] = 1;


		int ty = target[sy][sx].y;
		int tx = target[sy][sx].x;
		bool chk = false;

		while (!q.empty()) {
			int cy = q.front().first;
			int cx = q.front().second;
			q.pop();

			if (cy == ty && cx == tx) { // 목적지 찾음
				chk = true;
				success++;
				y = cy;
				x = cx;
				fuel -= (visit[cy][cx] - 1);
				fuel += ((visit[cy][cx] - 1) * 2);
				break;
			}

			if (fuel - (visit[cy][cx] - 1) == -1) // 연료 떨어짐
				return -1;

			for (int i = 0; i < 4; i++) {
				int ny = cy + dy[i];
				int nx = cx + dx[i];

				if (map[ny][nx] != WALL && !visit[ny][nx]) {
					visit[ny][nx] = visit[cy][cx] + 1;
					q.push({ ny, nx });
				}
			}
		}

		if (!chk)
			return -1;
	}

	return fuel;
}

int main(void)
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	cin >> N >> M >> F;

	for (int y = 1; y <= N; y++)
		for (int x = 1; x <= N; x++) {
			cin >> map[y][x];
			if (map[y][x])
				map[y][x] = WALL;
		}

	for (int i = 0; i <= N + 1; i++)
		map[i][0] = map[0][i] = map[i][N + 1] = map[N + 1][i] = WALL;

	int ty, tx;
	cin >> ty >> tx;

	for (int m = 0; m < M; m++) {
		int sy, sx, ey, ex;
		cin >> sy >> sx >> ey >> ex;

		map[sy][sx] = PASSENGER;
		target[sy][sx] = { ey, ex };
	}

	cout << BFS(ty, tx, F) << "\n";

	return 0;
}
