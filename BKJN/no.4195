// using STL map

#include <iostream>
#include <string>
#include <map>
using namespace std;

int parent[200001];
int Size[200001];

int get_parent(int num)
{
	if (parent[num] == num)
		return num;

	return parent[num] = get_parent(parent[num]);
}

void merge(int idx1, int idx2)
{
	int parent1 = get_parent(idx1);
	int parent2 = get_parent(idx2);

	if (parent1 != parent2) {
		if (Size[parent1] < Size[parent2])
			swap(parent1, parent2);

		parent[parent2] = parent1;
		Size[parent1] += Size[parent2];
		Size[parent2] = 0;
	}
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int T;
	cin >> T;

	for (int t = 1; t <= T; t++) {
		map<string, int> name;
		int F;
		cin >> F;

		int idx = 0;

		for (int f = 0; f < F; f++) {
			string name1, name2;
			cin >> name1 >> name2;

			if (name.count(name1) == 0) {
				name[name1] = idx++;
				parent[name[name1]] = name[name1];
				Size[name[name1]] = 1;
			}

			if (name.count(name2) == 0) {
				name[name2] = idx++;
				parent[name[name2]] = name[name2];
				Size[name[name2]] = 1;
			}

			int parent1 = get_parent(name[name1]);
			int parent2 = get_parent(name[name2]);

			if (parent1 == parent2)
				cout << max(Size[parent1], Size[parent2]) << "\n";
			else {
				merge(parent1, parent2);
				cout << max(Size[parent1], Size[parent2]) << "\n";
			}
		}
	}

	return 0;
}
