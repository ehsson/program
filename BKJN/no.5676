#include <iostream>
#include <cstring>
using namespace std;

int tree[100000 * 4];
int val[100001];

int Init(int start, int end, int node)
{
	if (start == end) {
		if (val[start] > 0)
			return tree[node] = 1;
		else if (val[start] == 0)
			return tree[node] = 0;
		else
			return tree[node] = -1;
	}

	int mid = (start + end) / 2;

	return tree[node] = Init(start, mid, node * 2) * Init(mid + 1, end, node * 2 + 1);
}

int query(int start, int end, int node, int left, int right)
{
	if (start > right || end < left)
		return 1;

	if (left <= start && end <= right)
		return tree[node];

	int mid = (start + end) / 2;

	return query(start, mid, node * 2, left, right) * query(mid + 1, end, node * 2 + 1, left, right);
}

int update(int start, int end, int node, int idx)
{
	if (idx < start || idx > end)
		return tree[node];

	if (start == end) {
		if (val[start] > 0)
			return tree[node] = 1;
		else if (val[start] == 0)
			return tree[node] = 0;
		else
			return tree[node] = -1;
	}

	int mid = (start + end) / 2;

	return tree[node] = update(start, mid, node * 2, idx) * update(mid + 1, end, node * 2 + 1, idx);
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int N, K;

	while (cin >> N >> K) {
		memset(tree, 0, sizeof(tree));

		for (int i = 1; i <= N; i++)
			cin >> val[i];

		Init(1, N, 1);

		for (int k = 0; k < K; k++) {
			char c;
			int a, b;
			cin >> c >> a >> b;

			if (c == 'C') { // 변경
				val[a] = b;
				update(1, N, 1, a);
			}
			else { // P  값 구하기
				if (query(1, N, 1, a, b) == 1)
					cout << "+";
				else if (query(1, N, 1, a, b) == -1)
					cout << "-";
				else
					cout << "0";
			}
		}

		cout << "\n";
	}

	return 0;
}
