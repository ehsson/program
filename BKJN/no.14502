#include <iostream>
#include <queue>
using namespace std;

int map[8][8];
int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };
int N, M;

bool IsInside(int y, int x)
{
	if (y >= 0 && y < N && x >= 0 && x < M)
		return true;
	else
		return false;
}

int BFS()
{
	queue<pair<int, int>> q;
	int temp[8][8];
	int cnt = 0;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			temp[i][j] = map[i][j];

			if (map[i][j] == 2)
				q.push({ i, j });
		}
	}

	while (!q.empty()) {
		int y = q.front().first;
		int x = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (IsInside(ny, nx) && temp[ny][nx] == 0) {
				q.push({ ny, nx });
				temp[ny][nx] = 2;
			}
		}
	}

	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			if (temp[i][j] == 0)
				cnt++;

	return cnt;
}

int main(void)
{
	FILE* pf;
	freopen_s(&pf, "input.txt", "r", stdin);
	int _max = 0;
	cin >> N >> M;

	for (int n = 0; n < N; n++)
		for (int m = 0; m < M; m++)
			cin >> map[n][m];

	for (int i = 0; i < N * M - 2; i++) {
		int yi = i / M, xi = i % M;

		if (map[yi][xi] != 0)
			continue;
		else
			map[yi][xi] = 1;

		for (int j = i + 1; j < N * M - 1; j++) {
			int yj = j / M, xj = j % M;

			if (map[yj][xj] != 0)
				continue;
			else
				map[yj][xj] = 1;

			for (int k = j + 1; k < N * M; k++) {
				int yk = k / M, xk = k % M;

				if (map[yk][xk] != 0)
					continue;
				else
					map[yk][xk] = 1;

				_max = max(_max, BFS());

				map[yk][xk] = 0;
			}

			map[yj][xj] = 0;
		}

		map[yi][xi] = 0;
	}

	cout << _max << "\n";

	return 0;
}
